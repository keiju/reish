* parser
** 大文字から始まるコマンド/メソッド
   -> 今は定数になってしまう...
** キーワード引数
** 関数定義
   * アクセサ foo=
   + 不定個引数など($*argで可能)
   * キーワード引数
** エリアス(bashの)
** case expr に変更?
  # 今は case arg
** メソッド定義
** # def_main arg1 ... argn -flag1 .. -fragn --key1 val1 ...  の対応
   ARGVの自動パーズ機能
** 単語の区切り方要検討
  # foo =>baz
  # foo baz=>
** ary[...] の ... 部分のリスト化
** #   trivial_command: trivial_command0 lex_arg の lex_arg正しい?
** Array, Hashで,を使えるようにする?
** %リテラル
** XSTRINGの仕様変更. 文字列として渡してeval形式にする
** DSTRING(#)
** ハッシュ中のsym:形式
** フォーマット付Number(FormedNumber)
** クラス定義
** 多重代入
** ヒアドキュメント
** EXPR_END再考
** # bash selectコマンド(ひつようない?)
** ワイルドカード ワード先頭に {}が来たとき, blockになってしまう.
** ワイルドカード 文字列"..."の中でワイルドカードが使えない.
** 空文(;;)が不可
** 引数で $func.exe は? 今は, $func.exe()
** if command[cr]then ができない
   -> 他の問題が発生するのでとりあえず削除

* code generation
** # command | if ... をもっとちゃんと対応したい(instance_evalを使わなく
   て実現できるか?)
   → comand | if cond ; then foo ; else bar ;end
   →→ x=command if x.conf; then x.foo; else x.bar; end
** リダイレクションのコード生成イマイチ
** # コード生成での括弧, セミコロンの使い方
** コマンド引数にEnumerableが渡ったときの処理
** return/break/next/redo/retryの対応
  #  rubyでは, 式中に上記のものを入れることができない.

* jobctl
**  TTOUTの処理は必要ない?
** fg/bgでのjobの選択アルゴリズム

* コンプレーション機能
** 完全なCompSystemCommand - パイプライン, リダイレクションの処理
** CompSpecでパイプライン処理できるものとできないものを区別し, それを, 
  実際のコマンド検索にも用いる
  stdinを利用する/stdoutに吐き出す等
** CompSpec#optparse optparseのような指定でオプションスペック指定でき
   るようにする
** in(TAB)等予約後をコンプレーションできない(パーズ時にエラーになる)

* Reidline
** readline互換インターフェース
*** 基本
*** ヒストリー
** ti_winsizeの問題
** その他編集機能
** このままだと入力時のパーズエラーが無視されてしまう...

* expr
** 計算式文 $exp ... end $exp{...}
** 計算式文 $expr ... end $expr{...}, %e...

* 実行環境
** コマンドキャッシュの変更(Class-in-stateの応用)
  # * コマンド検索をメソッド検索にしたい
      コマンドをモジュールのメソッドとして定義して, それを利用したい
** 完全なCompSystemCommand - パイプライン, リダイレクションの処理

* テスト環境
* ビルトイン関数

* 拡張機能
** shell server/shell client
