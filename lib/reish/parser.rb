#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require "reish/token"
  require "reish/node"

module Reish
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 1173)

  def initialize(lex)
    @yydebug = nil
    @cmpl_mode = nil
    @input_closed = nil
    @err_token = nil

    @lex = lex
  end

  attr_accessor :yydebug
  attr_accessor :cmpl_mode
  attr_accessor :input_closed
  
  attr_reader :err_token

  def next_token
    @lex.racc_token
  end

  def next_roken_cmpl
    @lex.racc_token_cmpl
  end

    def on_error(token_id, token, value_stack)

      if @yydebug || Reish::debug_cmpl?
	require "pp"
  
	puts "Reish: parse error: token line: #{token.line_no} char: #{token.char_no}"
	puts "TOKEN_ID: #{token_to_str(token_id)}"
	puts "TOKEN: #{token.pretty_inspect}"
	puts "VAULE_STACK: \n#{value_stack.pretty_inspect}"
#      puts "_VAULES: \n#{self.pretty_inspect}"
#      yyerrok
      end
      
      case
      when @cmpl_mode
	@cmpl_mode = value_stack
	Reish::Fail ParserComplSupp
      when @input_closed && token.kind_of?(EOFToken)
	Reish::Fail ParserClosingEOFSupp
#      when @input_closed
#	#Reish::Fail ParserClosingSupp
      else
	@err_token = token
	super
      end
    end

  def yyerror(token, msg)
    raise ParseError, msg
  end
    
# Begin Emacs Environment
# Local Variables:
#   mode: ruby
# End:
...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'149,150,270,463,432,158,269,433,102,102,102,102,158,297,149,150,153',
'138,102,145,473,108,109,149,150,192,51,52,53,54,55,56,61,145,158,472',
'102,434,178,153,138,102,464,185,180,367,184,368,369,51,52,53,54,55,56',
'61,103,103,103,103,93,404,95,96,97,99,103,101,124,125,126,127,128,129',
'130,131,132,133,134,135,182,136,137,93,103,95,96,97,99,103,101,124,125',
'126,127,128,129,130,131,132,133,134,135,7,136,137,185,185,-113,184,184',
'-116,185,378,158,184,120,121,453,36,37,38,39,51,52,53,54,55,56,61,-116',
'68,102,69,71,120,121,185,158,73,184,75,78,182,182,80,82,370,84,182,85',
'86,87,88,89,90,91,93,158,95,96,97,99,-116,101,7,236,237,399,400,238',
'239,240,241,242,243,244,245,149,150,103,36,37,38,39,51,52,53,54,55,56',
'61,178,68,102,69,71,185,180,185,184,73,184,75,78,297,375,80,82,384,84',
'158,85,86,87,88,89,90,91,93,158,95,96,97,99,364,101,7,226,227,106,107',
'228,229,230,231,232,233,234,235,118,119,103,36,37,38,39,51,52,53,54',
'55,56,61,158,68,102,69,71,185,158,185,184,73,184,75,78,158,394,80,82',
'395,84,158,85,86,87,88,89,90,91,93,397,95,96,97,99,158,101,7,112,113',
'114,115,408,360,409,410,116,110,111,402,158,405,103,36,37,38,39,51,52',
'53,54,55,56,61,158,68,102,69,71,358,158,158,158,73,192,75,78,158,158',
'80,82,416,84,162,85,86,87,88,89,90,91,93,158,95,96,97,99,158,101,7,112',
'113,114,115,428,158,207,158,116,110,111,437,158,158,103,36,37,38,39',
'51,52,53,54,55,56,61,439,68,102,69,71,158,158,158,158,73,158,75,78,448',
'449,80,82,158,84,455,85,86,87,88,89,90,91,93,456,95,96,97,99,158,101',
'7,112,113,114,115,158,158,158,158,116,110,111,371,158,466,103,36,37',
'38,39,51,52,53,54,55,56,61,467,68,102,69,71,468,158,471,158,73,158,75',
'78,161,158,80,82,158,84,158,85,86,87,88,89,90,91,93,158,95,96,97,99',
'158,101,7,112,113,114,115,158,158,158,158,116,110,111,158,158,158,103',
'36,37,38,39,51,52,53,54,55,56,61,158,68,102,69,71,158,275,158,158,73',
'158,75,78,287,158,80,82,306,84,496,85,86,87,88,89,90,91,93,158,95,96',
'97,99,104,101,7,275,297,158,3,4,158,,,,,,,,,103,36,37,38,39,51,52,53',
'54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89',
'90,91,93,,95,96,97,99,,101,7,112,113,114,115,,,,,116,110,111,,,,103',
'36,37,38,39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82',
',84,,85,86,87,88,89,90,91,93,,95,96,97,99,,101,7,-269,-269,-269,-269',
',,,,116,110,111,,,,103,36,37,38,39,51,52,53,54,55,56,61,,68,102,69,71',
',,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91,93,,95,96,97,99,,101',
'7,112,113,114,115,,,,,116,110,111,,,,103,36,37,38,39,51,52,53,54,55',
'56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91',
'93,,95,96,97,99,,101,7,112,113,114,115,,,,,116,110,111,,,,103,36,37',
'38,39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,',
'85,86,87,88,89,90,91,93,,95,96,97,99,,101,7,-269,-269,-269,-269,,,,',
'116,110,111,,,,103,36,37,38,39,51,52,53,54,55,56,61,,68,102,69,71,,',
',,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91,93,,95,96,97,99,,101,7',
'112,113,114,115,,,,,116,110,111,,,,103,36,37,38,39,51,52,53,54,55,56',
'61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91,93',
',95,96,97,99,,101,7,112,113,114,115,,,,,116,110,111,,,,103,36,37,38',
'39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85',
'86,87,88,89,90,91,93,,95,96,97,99,,101,7,-269,-269,-269,-269,,,,,116',
'110,111,,,,103,36,37,38,39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73',
',75,78,,,80,82,,84,,85,86,87,88,89,90,91,93,,95,96,97,99,,101,7,112',
'113,114,115,,,,,116,110,111,,,,103,36,37,38,39,51,52,53,54,55,56,61',
',68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91,93,,95',
'96,97,99,,101,7,-269,-269,-269,-269,,,,,116,110,111,,,,103,36,37,38',
'39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85',
'86,87,88,89,90,91,93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38',
'39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85',
'86,87,88,89,90,91,93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38',
'39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85',
'86,87,88,89,90,91,93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38',
'39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85',
'86,87,88,89,90,91,93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38',
'39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85',
'86,87,88,89,90,91,93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38',
'39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85',
'86,87,88,89,90,91,93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38',
'39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85',
'86,87,88,89,90,91,93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38',
'39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85',
'86,87,88,89,90,91,93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38',
'39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85',
'86,87,88,89,90,91,93,,95,96,97,99,,101,,,,,,,153,138,,,,,,,,103,51,52',
'53,54,55,56,61,,,,,,,153,138,,,,,,,,,51,52,53,54,55,56,61,,,,,93,,95',
'96,97,99,,101,124,125,126,127,128,129,130,131,132,133,134,135,,136,137',
'93,,95,96,97,99,,101,124,125,126,127,128,129,130,131,132,133,134,135',
',136,137,153,138,,,,,,,,,51,52,53,54,55,56,61,,,,,,,153,138,,,,,,,,',
'51,52,53,54,55,56,61,,,,,93,,95,96,97,99,,101,124,125,126,127,128,129',
'130,131,132,133,134,135,,136,137,93,,95,96,97,99,,101,124,125,126,127',
'128,129,130,131,132,133,134,135,,136,137,153,138,,,,,,,,,51,52,53,54',
'55,56,61,,,,,,,153,138,,,,,,,,,51,52,53,54,55,56,61,,,,,93,,95,96,97',
'99,,101,124,125,126,127,128,129,130,131,132,133,134,135,,136,137,93',
',95,96,97,99,,101,124,125,126,127,128,129,130,131,132,133,134,135,,136',
'137,153,138,,,,,,,,,51,52,53,54,55,56,61,,,,,,,153,138,,,,,,,,,51,52',
'53,54,55,56,61,,,,,93,,95,96,97,99,,101,124,125,126,127,128,129,130',
'131,132,133,134,135,,136,137,93,,95,96,97,99,,101,124,125,126,127,128',
'129,130,131,132,133,134,135,,136,137,153,138,,,,,,,,,51,52,53,54,55',
'56,61,,,,,,,224,138,,,,,,,,,51,52,53,54,55,56,61,,,,,93,,95,96,97,99',
',101,124,125,126,127,128,129,130,131,132,133,134,135,,136,137,93,,95',
'96,97,99,,101,,,,224,138,,,,,,,,255,51,52,53,54,55,56,61,,,224,138,',
',,,,,224,138,51,52,53,54,55,56,61,,51,52,53,54,55,56,61,93,,95,96,97',
'99,,101,,,,,,,,,,,,93,253,95,96,97,99,,101,93,,95,96,97,99,,101,,,,',
'355,224,138,,,,,,353,224,138,51,52,53,54,55,56,61,,51,52,53,54,55,56',
'61,112,113,114,115,,,,,116,110,111,,,,,185,,,184,93,,95,96,97,99,,101',
'93,,95,96,97,99,,101,,,,,343,,,,,,,,341,36,37,38,310,51,52,53,54,55',
'56,61,,,102,,71,,,,,73,,75,78,,,80,82,,84,,,,,,,,,93,,95,,97,99,,101',
',36,37,38,310,51,52,53,54,55,56,61,,,102,103,71,,,,,73,,75,78,,,80,82',
',84,,,,,,,,,93,,95,,97,99,,101,,36,37,38,310,51,52,53,54,55,56,61,,',
'102,103,71,,,,,73,,75,78,,,80,82,,84,,,,,,,,,93,,95,96,97,99,,101,,36',
'37,38,310,51,52,53,54,55,56,61,,,102,103,71,,,,,73,,75,78,,,80,82,,84',
',,,,,,,,93,,95,,97,99,,101,,36,37,38,310,51,52,53,54,55,56,61,,,102',
'103,71,,,,,73,,75,78,,,80,82,,84,,,,,,,,,93,,95,96,97,99,,101,,36,37',
'38,310,51,52,53,54,55,56,61,,,102,103,71,,,,,73,,75,78,,,80,82,,84,',
',,,,,,,93,,95,,97,99,,101,,36,37,38,310,51,52,53,54,55,56,61,,,102,103',
'71,,,,,73,,75,78,,,80,82,,84,477,,,,,,313,138,93,,95,,97,99,,101,51',
'52,53,54,55,56,61,,112,113,114,115,,,,103,116,110,111,,,,,185,,,184',
',,,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,224,138,,,',
',,,,182,51,52,53,54,55,56,61,,,,,,,224,138,93,,95,96,97,99,,101,51,52',
'53,54,55,56,61,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,',
',,,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,224,138,93',
',95,96,97,99,,101,51,52,53,54,55,56,61,,,,,,,224,138,93,,95,96,97,99',
',101,51,52,53,54,55,56,61,,,224,138,93,,95,96,97,99,,101,51,52,53,54',
'55,56,61,,,,,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,224',
'138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,,,,,224,138,93,,95,96',
'97,99,,101,51,52,53,54,55,56,61,,,224,138,93,,95,96,97,99,,101,51,52',
'53,54,55,56,61,,,,,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56',
'61,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,,,,,224,138',
'93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,224,138,93,,95,96,97,99',
',101,51,52,53,54,55,56,61,,,,,,,224,138,93,,95,96,97,99,,101,51,52,53',
'54,55,56,61,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,,',
',,313,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,313,138,93,,95',
'96,97,99,,101,51,52,53,54,55,56,61,,,,,,,224,138,93,,95,96,97,99,,101',
'51,52,53,54,55,56,61,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56',
'61,,,,,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,313,138',
'93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,,,,,419,,93,,95,96,97,99',
',101,,,,,,,,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,313',
'138,,,,,,,313,138,51,52,53,54,55,56,61,,51,52,53,54,55,56,61,224,138',
'93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,93,,95,96,97,99,,101,93',
',95,96,97,99,,101,,,,,,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55',
'56,61,313,138,,,,,,,224,138,51,52,53,54,55,56,61,,51,52,53,54,55,56',
'61,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,93,,95,96,97',
'99,,101,93,,95,96,97,99,,101,,,,,,,,,,93,,95,96,97,99,,101,112,113,114',
'115,112,113,114,115,116,110,111,,116,110,111,432,,,433,432,,,433,124',
'125,126,127,128,129,130,131,132,133,134,135,,136,137,,,,,,,,,,,434,',
',,434,124,125,126,127,128,129,130,131,132,133,134,135,,136,137' ]
        racc_action_table = arr = ::Array.new(3445, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'31,31,160,425,500,315,160,500,68,377,69,160,281,442,309,309,31,31,454',
'31,441,5,5,143,143,442,31,31,31,31,31,31,31,309,426,441,485,500,438',
'143,143,39,426,179,438,277,179,277,277,143,143,143,143,143,143,143,68',
'377,69,160,31,315,31,31,31,31,454,31,31,31,31,31,31,31,31,31,31,31,31',
'31,179,31,31,143,485,143,143,143,143,39,143,143,143,143,143,143,143',
'143,143,143,143,143,143,286,143,143,77,303,25,77,303,25,418,282,411',
'418,25,25,411,286,286,286,286,286,286,286,286,286,286,286,326,286,286',
'286,286,326,326,374,283,286,374,286,286,77,303,286,286,278,286,418,286',
'286,286,286,286,286,286,286,285,286,286,286,286,307,286,481,127,127',
'307,307,127,127,127,127,127,127,127,127,33,33,286,481,481,481,481,481',
'481,481,481,481,481,481,76,481,481,481,481,280,76,373,280,481,373,481',
'481,274,280,481,481,289,481,67,481,481,481,481,481,481,481,481,293,481',
'481,481,481,273,481,480,126,126,2,2,126,126,126,126,126,126,126,126',
'20,20,481,480,480,480,480,480,480,480,480,480,480,480,297,480,480,480',
'480,159,66,178,159,480,178,480,480,300,301,480,480,302,480,70,480,480',
'480,480,480,480,480,480,305,480,480,480,480,264,480,7,296,296,296,296',
'357,263,357,357,296,296,296,314,65,316,480,7,7,7,7,7,7,7,7,7,7,7,318',
'7,7,7,7,261,78,79,80,7,83,7,7,92,363,7,7,365,7,64,7,7,7,7,7,7,7,7,94',
'7,7,7,7,98,7,479,209,209,209,209,376,100,104,110,209,209,209,383,386',
'111,7,479,479,479,479,479,479,479,479,479,479,479,390,479,479,479,479',
'393,396,399,400,479,404,479,479,406,407,479,479,112,479,412,479,479',
'479,479,479,479,479,479,414,479,479,479,479,416,479,462,208,208,208',
'208,113,420,421,422,208,208,208,279,114,430,479,462,462,462,462,462',
'462,462,462,462,462,462,433,462,462,462,462,435,115,440,118,462,119',
'462,462,62,120,462,462,34,462,450,462,462,462,462,462,462,462,462,451',
'462,462,462,462,452,462,461,6,6,6,6,453,121,459,147,6,6,6,148,161,469',
'462,461,461,461,461,461,461,461,461,461,461,461,478,461,461,461,461',
'162,164,172,484,461,174,461,461,175,176,461,461,201,461,489,461,461',
'461,461,461,461,461,461,180,461,461,461,461,1,461,0,494,187,498,0,0',
'190,,,,,,,,,461,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,0,,,,,0,,0,0,,,0,0,,0,',
'0,0,0,0,0,0,0,0,,0,0,0,0,,0,460,486,486,486,486,,,,,486,486,486,,,,0',
'460,460,460,460,460,460,460,460,460,460,460,,460,460,460,460,,,,,460',
',460,460,,,460,460,,460,,460,460,460,460,460,460,460,460,,460,460,460',
'460,,460,109,324,324,324,324,,,,,324,324,324,,,,460,109,109,109,109',
'109,109,109,109,109,109,109,,109,109,109,109,,,,,109,,109,109,,,109',
'109,,109,,109,109,109,109,109,109,109,109,,109,109,109,109,,109,210',
'487,487,487,487,,,,,487,487,487,,,,109,210,210,210,210,210,210,210,210',
'210,210,210,,210,210,210,210,,,,,210,,210,210,,,210,210,,210,,210,210',
'210,210,210,210,210,210,,210,210,210,210,,210,211,276,276,276,276,,',
',,276,276,276,,,,210,211,211,211,211,211,211,211,211,211,211,211,,211',
'211,211,211,,,,,211,,211,211,,,211,211,,211,,211,211,211,211,211,211',
'211,211,,211,211,211,211,,211,212,322,322,322,322,,,,,322,322,322,,',
',211,212,212,212,212,212,212,212,212,212,212,212,,212,212,212,212,,',
',,212,,212,212,,,212,212,,212,,212,212,212,212,212,212,212,212,,212',
'212,212,212,,212,165,387,387,387,387,,,,,387,387,387,,,,212,165,165',
'165,165,165,165,165,165,165,165,165,,165,165,165,165,,,,,165,,165,165',
',,165,165,,165,,165,165,165,165,165,165,165,165,,165,165,165,165,,165',
'213,488,488,488,488,,,,,488,488,488,,,,165,213,213,213,213,213,213,213',
'213,213,213,213,,213,213,213,213,,,,,213,,213,213,,,213,213,,213,,213',
'213,213,213,213,213,213,213,,213,213,213,213,,213,292,323,323,323,323',
',,,,323,323,323,,,,213,292,292,292,292,292,292,292,292,292,292,292,',
'292,292,292,292,,,,,292,,292,292,,,292,292,,292,,292,292,292,292,292',
'292,292,292,,292,292,292,292,,292,491,497,497,497,497,,,,,497,497,497',
',,,292,491,491,491,491,491,491,491,491,491,491,491,,491,491,491,491',
',,,,491,,491,491,,,491,491,,491,,491,491,491,491,491,491,491,491,,491',
'491,491,491,,491,84,321,321,321,321,,,,,321,321,321,,,,491,84,84,84',
'84,84,84,84,84,84,84,84,,84,84,84,84,,,,,84,,84,84,,,84,84,,84,,84,84',
'84,84,84,84,84,84,,84,84,84,84,,84,214,,,,,,,,,,,,,,,84,214,214,214',
'214,214,214,214,214,214,214,214,,214,214,214,214,,,,,214,,214,214,,',
'214,214,,214,,214,214,214,214,214,214,214,214,,214,214,214,214,,214',
'215,,,,,,,,,,,,,,,214,215,215,215,215,215,215,215,215,215,215,215,,215',
'215,215,215,,,,,215,,215,215,,,215,215,,215,,215,215,215,215,215,215',
'215,215,,215,215,215,215,,215,262,,,,,,,,,,,,,,,215,262,262,262,262',
'262,262,262,262,262,262,262,,262,262,262,262,,,,,262,,262,262,,,262',
'262,,262,,262,262,262,262,262,262,262,262,,262,262,262,262,,262,260',
',,,,,,,,,,,,,,262,260,260,260,260,260,260,260,260,260,260,260,,260,260',
'260,260,,,,,260,,260,260,,,260,260,,260,,260,260,260,260,260,260,260',
'260,,260,260,260,260,,260,188,,,,,,,,,,,,,,,260,188,188,188,188,188',
'188,188,188,188,188,188,,188,188,188,188,,,,,188,,188,188,,,188,188',
',188,,188,188,188,188,188,188,188,188,,188,188,188,188,,188,186,,,,',
',,,,,,,,,,188,186,186,186,186,186,186,186,186,186,186,186,,186,186,186',
'186,,,,,186,,186,186,,,186,186,,186,,186,186,186,186,186,186,186,186',
',186,186,186,186,,186,108,,,,,,,,,,,,,,,186,108,108,108,108,108,108',
'108,108,108,108,108,,108,108,108,108,,,,,108,,108,108,,,108,108,,108',
',108,108,108,108,108,108,108,108,,108,108,108,108,,108,284,,,,,,,,,',
',,,,,108,284,284,284,284,284,284,284,284,284,284,284,,284,284,284,284',
',,,,284,,284,284,,,284,284,,284,,284,284,284,284,284,284,284,284,,284',
'284,284,284,,284,,,,,,,85,85,,,,,,,,284,85,85,85,85,85,85,85,,,,,,,86',
'86,,,,,,,,,86,86,86,86,86,86,86,,,,,85,,85,85,85,85,,85,85,85,85,85',
'85,85,85,85,85,85,85,85,,85,85,86,,86,86,86,86,,86,86,86,86,86,86,86',
'86,86,86,86,86,86,,86,86,89,89,,,,,,,,,89,89,89,89,89,89,89,,,,,,,90',
'90,,,,,,,,,90,90,90,90,90,90,90,,,,,89,,89,89,89,89,,89,89,89,89,89',
'89,89,89,89,89,89,89,89,,89,89,90,,90,90,90,90,,90,90,90,90,90,90,90',
'90,90,90,90,90,90,,90,90,91,91,,,,,,,,,91,91,91,91,91,91,91,,,,,,,116',
'116,,,,,,,,,116,116,116,116,116,116,116,,,,,91,,91,91,91,91,,91,91,91',
'91,91,91,91,91,91,91,91,91,91,,91,91,116,,116,116,116,116,,116,116,116',
'116,116,116,116,116,116,116,116,116,116,,116,116,156,156,,,,,,,,,156',
'156,156,156,156,156,156,,,,,,,194,194,,,,,,,,,194,194,194,194,194,194',
'194,,,,,156,,156,156,156,156,,156,156,156,156,156,156,156,156,156,156',
'156,156,156,,156,156,194,,194,194,194,194,,194,194,194,194,194,194,194',
'194,194,194,194,194,194,,194,194,192,192,,,,,,,,,192,192,192,192,192',
'192,192,,,,,,,135,135,,,,,,,,,135,135,135,135,135,135,135,,,,,192,,192',
'192,192,192,,192,192,192,192,192,192,192,192,192,192,192,192,192,,192',
'192,135,,135,135,135,135,,135,,,,134,134,,,,,,,,135,134,134,134,134',
'134,134,134,,,245,245,,,,,,,244,244,245,245,245,245,245,245,245,,244',
'244,244,244,244,244,244,134,,134,134,134,134,,134,,,,,,,,,,,,245,134',
'245,245,245,245,,245,244,,244,244,244,244,,244,,,,,245,235,235,,,,,',
'244,234,234,235,235,235,235,235,235,235,,234,234,234,234,234,234,234',
'193,193,193,193,,,,,193,193,193,,,,,193,,,193,235,,235,235,235,235,',
'235,234,,234,234,234,234,,234,,,,,235,,,,,,,,234,445,445,445,445,445',
'445,445,445,445,445,445,,,445,,445,,,,,445,,445,445,,,445,445,,445,',
',,,,,,,445,,445,,445,445,,445,,446,446,446,446,446,446,446,446,446,446',
'446,,,446,445,446,,,,,446,,446,446,,,446,446,,446,,,,,,,,,446,,446,',
'446,446,,446,,218,218,218,218,218,218,218,218,218,218,218,,,218,446',
'218,,,,,218,,218,218,,,218,218,,218,,,,,,,,,218,,218,218,218,218,,218',
',219,219,219,219,219,219,219,219,219,219,219,,,219,218,219,,,,,219,',
'219,219,,,219,219,,219,,,,,,,,,219,,219,,219,219,,219,,217,217,217,217',
'217,217,217,217,217,217,217,,,217,219,217,,,,,217,,217,217,,,217,217',
',217,,,,,,,,,217,,217,217,217,217,,217,,202,202,202,202,202,202,202',
'202,202,202,202,,,202,217,202,,,,,202,,202,202,,,202,202,,202,,,,,,',
',,202,,202,,202,202,,202,,220,220,220,220,220,220,220,220,220,220,220',
',,220,202,220,,,,,220,,220,220,,,220,220,,220,448,,,,,,448,448,220,',
'220,,220,220,,220,448,448,448,448,448,448,448,,299,299,299,299,,,,220',
'299,299,299,,,,,299,,,299,,,,,,133,133,448,,448,448,448,448,,448,133',
'133,133,133,133,133,133,,,125,125,,,,,,,,299,125,125,125,125,125,125',
'125,,,,,,,128,128,133,,133,133,133,133,,133,128,128,128,128,128,128',
'128,,,129,129,125,,125,125,125,125,,125,129,129,129,129,129,129,129',
',,,,,,130,130,128,,128,128,128,128,,128,130,130,130,130,130,130,130',
',,131,131,129,,129,129,129,129,,129,131,131,131,131,131,131,131,,,,',
',,132,132,130,,130,130,130,130,,130,132,132,132,132,132,132,132,,,226',
'226,131,,131,131,131,131,,131,226,226,226,226,226,226,226,,,,,,,124',
'124,132,,132,132,132,132,,132,124,124,124,124,124,124,124,,,243,243',
'226,,226,226,226,226,,226,243,243,243,243,243,243,243,,,,,,,136,136',
'124,,124,124,124,124,,124,136,136,136,136,136,136,136,,,137,137,243',
',243,243,243,243,,243,137,137,137,137,137,137,137,,,,,,,227,227,136',
',136,136,136,136,,136,227,227,227,227,227,227,227,,,228,228,137,,137',
'137,137,137,,137,228,228,228,228,228,228,228,,,,,,,229,229,227,,227',
'227,227,227,,227,229,229,229,229,229,229,229,,,230,230,228,,228,228',
'228,228,,228,230,230,230,230,230,230,230,,,,,,,231,231,229,,229,229',
'229,229,,229,231,231,231,231,231,231,231,,,242,242,230,,230,230,230',
'230,,230,242,242,242,242,242,242,242,,,,,,,271,271,231,,231,231,231',
'231,,231,271,271,271,271,271,271,271,,,272,272,242,,242,242,242,242',
',242,272,272,272,272,272,272,272,,,,,,,232,232,271,,271,271,271,271',
',271,232,232,232,232,232,232,232,,,233,233,272,,272,272,272,272,,272',
'233,233,233,233,233,233,233,,,,,,,236,236,232,,232,232,232,232,,232',
'236,236,236,236,236,236,236,,,366,366,233,,233,233,233,233,,233,366',
'366,366,366,366,366,366,,,,,,,366,,236,,236,236,236,236,,236,,,,,,,',
',,241,241,366,,366,366,366,366,,366,241,241,241,241,241,241,241,205',
'205,,,,,,,203,203,205,205,205,205,205,205,205,,203,203,203,203,203,203',
'203,240,240,241,,241,241,241,241,,241,240,240,240,240,240,240,240,,',
'205,,205,205,205,205,,205,203,,203,203,203,203,,203,,,,,,,,239,239,240',
',240,240,240,240,,240,239,239,239,239,239,239,239,492,492,,,,,,,238',
'238,492,492,492,492,492,492,492,,238,238,238,238,238,238,238,237,237',
'239,,239,239,239,239,,239,237,237,237,237,237,237,237,,,492,,492,492',
'492,492,,492,238,,238,238,238,238,,238,,,,,,,,,,237,,237,237,237,237',
',237,380,380,380,380,382,382,382,382,380,380,380,,382,382,382,380,,',
'380,382,,,382,122,122,122,122,122,122,122,122,122,122,122,122,,122,122',
',,,,,,,,,,380,,,,382,29,29,29,29,29,29,29,29,29,29,29,29,,29,29' ]
        racc_action_check = arr = ::Array.new(3445, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   523,   535,   212,   nil,   nil,     1,   473,   275,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   218,   nil,   nil,   nil,   nil,   101,   nil,   nil,   nil,  3354,
   nil,    -8,   nil,   170,   439,   nil,   nil,   nil,   nil,    -2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   446,   nil,   325,   284,   242,   193,   -35,   -33,
   255,   nil,   nil,   nil,   nil,   nil,   144,    88,   304,   305,
   306,   nil,   nil,   266,  1143,  1697,  1720,   nil,   nil,  1787,
  1810,  1877,   311,   nil,   326,   nil,   nil,   nil,   331,   nil,
   339,   nil,   nil,   nil,   358,   nil,   nil,   nil,  1577,   647,
   341,   347,   377,   400,   408,   428,  1900,   nil,   430,   432,
   436,   463,  3324,   nil,  2820,  2671,   152,    90,  2694,  2713,
  2736,  2755,  2778,  2652,  2135,  2080,  2862,  2881,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   465,   469,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1967,   nil,   nil,   241,
   -32,   470,   489,   nil,   462,   895,   nil,   nil,   nil,   nil,
   nil,   nil,   491,   nil,   494,   487,   498,   nil,   243,    25,
   512,   nil,   nil,   nil,   nil,   nil,  1515,   491,  1453,   nil,
   525,   nil,  2057,  2265,  1990,   nil,   nil,   nil,   nil,   nil,
   nil,   450,  2521,  3200,   nil,  3192,   nil,   nil,   411,   349,
   709,   771,   833,   957,  1205,  1267,   nil,  2474,  2380,  2427,
  2568,   nil,   nil,   nil,   nil,   nil,  2797,  2904,  2923,  2946,
  2965,  2988,  3072,  3091,  2227,  2219,  3114,  3301,  3284,  3259,
  3217,  3175,  3007,  2839,  2162,  2154,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1391,   299,  1329,   269,   269,   nil,   nil,   nil,   nil,   nil,
   nil,  3030,  3049,   197,   157,   nil,   783,    27,   119,   397,
   179,    -6,    85,   120,  1639,   140,    89,   nil,   nil,   181,
   nil,   nil,  1019,   202,   nil,   nil,   287,   236,   nil,  2649,
   249,   225,   243,    89,   nil,   256,   nil,   153,   nil,     6,
   nil,   nil,   nil,   nil,   260,   -13,   274,   nil,   298,   nil,
   nil,  1155,   845,  1031,   659,   nil,   120,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   276,   nil,   nil,
   nil,   nil,   nil,   312,   nil,   284,  3133,   nil,   nil,   nil,
   nil,   nil,   nil,   181,   119,   nil,   313,   -34,   nil,   nil,
  3374,   nil,  3378,   335,   nil,   nil,   346,   907,   nil,   nil,
   350,   nil,   nil,   365,   nil,   nil,   366,   nil,   nil,   367,
   368,   nil,   nil,   nil,   370,   nil,   344,   364,   nil,   nil,
   nil,    96,   368,   nil,   365,   nil,   393,   nil,    94,   nil,
   401,   402,   403,   nil,   nil,   -40,    16,   nil,   nil,   nil,
   399,   nil,   nil,   389,   nil,   417,   nil,   nil,   -10,   nil,
   419,   -23,   -35,   nil,   nil,  2286,  2333,   nil,  2610,   nil,
   441,   450,   455,   462,   -25,   nil,   nil,   nil,   nil,   464,
   585,   461,   399,   nil,   nil,   nil,   nil,   nil,   nil,   471,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   484,   337,
   213,   151,   nil,   nil,   492,    -7,   597,   721,   969,   478,
   nil,  1081,  3276,   nil,   492,   nil,   nil,  1093,   522,   nil,
   -14,   nil,   nil ]

racc_action_default = [
  -269,  -269,  -269,    -2,    -3,    -4,    -7,  -269,   -18,   -19,
   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,
   -30,   -33,   -34,   -35,   -36,   -37,   -42,   -43,   -44,   -47,
   -46,   -65,   -59,   -65,  -261,   -75,   -76,   -77,   -78,   -79,
   -87,   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,
   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -106,
  -107,  -265,  -269,  -114,  -269,  -261,  -261,  -261,  -269,  -269,
  -261,  -131,  -264,  -263,  -264,  -263,  -268,  -269,  -261,  -261,
  -261,  -264,  -263,  -269,  -269,   -80,   -80,  -174,  -175,   -80,
   -80,   -80,  -261,  -180,  -261,  -182,  -265,  -185,  -261,  -187,
  -261,  -192,  -253,  -254,  -269,    -1,  -255,  -256,    -5,    -6,
  -261,  -261,  -261,  -261,  -261,  -261,   -80,   -17,  -261,  -261,
  -261,  -261,   -45,  -211,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,   -52,   -53,
   -54,   -55,   -56,   -65,   -58,   -62,   -66,  -261,  -261,   -69,
   -70,   -82,   -84,   -85,   -86,   -60,  -268,   -63,  -265,  -269,
  -269,  -261,  -261,  -268,  -133,  -197,  -268,  -268,  -265,  -265,
  -268,  -265,  -261,  -265,  -261,  -269,  -261,  -268,  -269,  -269,
  -261,  -265,  -159,  -160,  -265,  -265,  -269,  -137,  -269,  -265,
  -261,  -268,   -80,  -269,   -81,  -172,  -173,  -176,  -177,  -178,
  -268,  -269,  -269,  -268,  -188,  -268,  -193,   503,    -8,    -9,
  -269,  -269,  -269,  -269,  -269,  -269,   -16,  -269,  -269,  -269,
  -269,  -212,  -213,  -251,  -252,  -214,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -219,  -222,  -225,  -228,
  -231,  -234,  -237,  -246,  -240,  -243,  -249,  -250,   -57,   -83,
  -202,   -71,  -202,  -269,  -261,  -262,  -118,  -108,  -109,  -110,
  -111,  -269,  -269,  -269,  -137,   -48,  -207,  -198,  -269,  -269,
  -265,  -261,  -269,  -261,  -269,  -261,  -269,  -149,  -268,  -269,
  -265,  -265,  -269,  -261,  -259,  -260,  -154,  -261,  -268,  -269,
  -261,  -269,  -269,  -269,  -168,  -269,  -268,  -184,   -47,   -65,
   -79,  -266,   -50,   -51,  -269,  -261,  -269,  -194,  -261,   -10,
   -11,   -12,   -13,   -14,   -15,   -31,   -37,   -32,   -38,   -40,
   -39,   -41,  -215,  -216,  -220,  -223,  -226,  -229,  -232,  -235,
  -238,  -247,  -241,  -244,  -217,  -218,  -221,  -224,  -227,  -230,
  -233,  -236,  -239,  -248,  -242,  -245,  -268,  -203,   -73,  -268,
  -267,   -64,  -112,  -261,  -117,  -139,  -135,  -265,  -265,  -265,
  -119,  -120,  -121,  -269,  -265,  -265,  -269,  -269,  -130,  -268,
  -269,  -268,  -269,  -269,  -151,  -152,  -261,  -158,  -153,  -138,
  -269,  -162,  -268,  -261,  -165,  -167,  -261,  -266,  -266,  -261,
  -261,  -183,  -186,  -189,  -261,  -191,  -269,  -269,  -265,  -265,
  -265,  -261,  -269,   -61,  -269,  -132,  -261,   -49,  -269,  -265,
  -261,  -261,  -261,  -122,  -123,  -269,  -261,  -125,  -127,  -129,
  -269,  -142,  -143,  -144,  -146,  -269,  -148,  -150,  -155,  -161,
  -269,  -269,  -137,  -179,  -181,  -269,  -269,  -190,  -269,   -67,
  -261,  -261,  -261,  -261,  -269,   -68,  -115,  -140,  -265,  -261,
  -199,  -200,  -201,  -128,  -124,  -265,  -141,  -145,  -147,  -261,
  -157,  -163,  -265,  -166,  -169,  -170,  -171,  -266,  -261,  -204,
  -205,  -206,   -72,   -74,  -261,  -269,  -208,  -209,  -210,  -269,
  -156,  -269,  -269,  -196,  -133,  -136,  -126,  -265,  -261,  -134,
  -269,  -195,  -164 ]

racc_goto_table = [
    24,   176,   177,   191,   159,   401,   274,    24,   298,   329,
   331,   181,   266,   315,   431,   318,   436,   155,   123,   259,
   172,   171,   174,   173,   356,   308,   359,   309,   415,   190,
   189,   290,   264,   168,   169,   195,   196,    48,   307,   197,
   198,   199,   308,   308,    48,   426,   304,   163,   166,   167,
   325,   327,   170,   326,   326,   260,   262,   328,   330,   122,
   373,   366,   374,   418,   267,   143,   216,   411,   156,   413,
   259,     5,   393,   105,   474,     2,   311,   203,   205,   317,
   277,   362,   363,     1,    24,   nil,   nil,   nil,   nil,   nil,
   nil,   443,   444,   nil,   nil,   365,   nil,   nil,   nil,    49,
   nil,   nil,   nil,   nil,   152,   nil,    49,   nil,    24,    24,
   nil,   221,   nil,   291,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    48,   nil,   nil,   nil,   268,   nil,   258,   nil,   nil,
   nil,   nil,   nil,   372,   502,   nil,     6,   nil,   nil,   nil,
   nil,   nil,   303,   117,   nil,    48,    48,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   152,   152,
   nil,   nil,   152,   152,   152,    24,   nil,   nil,   nil,   nil,
   nil,   492,   nil,   nil,   nil,   nil,   417,   nil,   nil,   nil,
   nil,   nil,   nil,    49,   nil,   nil,    24,   nil,    24,   152,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    48,   nil,   nil,   nil,   nil,    49,    49,   nil,
    24,    24,    24,    24,    24,    24,   152,    24,    24,   nil,
   193,   nil,   nil,    48,   nil,    48,   423,   424,   nil,   152,
   nil,   nil,   nil,   391,   nil,   329,   331,   396,   nil,    48,
   nil,   nil,   nil,   nil,   208,   209,   nil,    48,    48,    48,
    48,    48,    48,   nil,    48,    48,    48,    48,   478,   nil,
    24,   nil,    24,   475,    49,   152,   nil,   152,   308,   308,
   309,   309,   nil,   nil,   nil,   nil,   312,   nil,   312,   nil,
   nil,   nil,   nil,   nil,    24,    49,    24,    49,   nil,   157,
   nil,   nil,    24,   nil,   nil,   nil,   nil,    48,   nil,    48,
   nil,    49,   498,   nil,   nil,   nil,   nil,   nil,   nil,    49,
    49,    49,    49,    49,    49,   nil,    49,    49,    49,    49,
   nil,    48,   296,    48,   299,   nil,   nil,   nil,   nil,    48,
   nil,   nil,   nil,   186,   nil,   188,   499,   nil,   nil,   nil,
   nil,   nil,   429,   nil,   312,   312,   319,   320,   321,   322,
   323,   324,   458,   204,   nil,   206,   nil,   nil,   nil,    49,
   nil,    49,   476,   469,   470,   210,   211,   212,   213,   214,
   215,   nil,   nil,   217,   218,   219,   220,   nil,   nil,   nil,
   160,   nil,   nil,    49,   nil,    49,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   261,   261,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   202,   271,   272,    50,   483,
   380,   nil,   382,   nil,   nil,    50,   nil,   284,   387,   286,
   nil,   nil,   nil,   nil,   nil,   292,   nil,   nil,   nil,   312,
   nil,   nil,   nil,   187,   nil,   301,   nil,   nil,   nil,   nil,
   495,   nil,   nil,   nil,   nil,   nil,   200,   nil,   201,   nil,
    24,    24,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   265,   nil,    24,
    24,    24,    48,    48,   nil,   nil,   nil,   280,   281,   nil,
   283,    24,   285,   nil,   nil,   nil,   nil,    48,    48,    48,
   293,   nil,    50,   294,   295,   nil,   nil,   nil,   300,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    48,    48,    48,   361,
   nil,   312,   nil,   nil,   nil,   nil,    50,    50,    48,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   377,   nil,   nil,   nil,
   288,   nil,   nil,   nil,    49,    49,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,
    49,    49,   nil,   nil,   nil,   312,   nil,   nil,   nil,   nil,
   403,   nil,   nil,   406,   nil,   nil,   nil,   nil,    49,    49,
    49,   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,
    49,   nil,   nil,   nil,   nil,   nil,   486,   487,   488,   376,
   nil,   nil,   nil,   nil,    50,   nil,    50,   nil,   nil,   385,
   386,   nil,   nil,   nil,   nil,   486,   487,   488,   414,   nil,
    50,   nil,   nil,   nil,   nil,   nil,   nil,   497,    50,    50,
    50,    50,    50,    50,   nil,    50,    50,    50,    50,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   379,   441,   381,
   nil,   nil,   nil,   nil,   445,   446,   nil,   388,   nil,   447,
   nil,   389,   nil,   nil,   392,   nil,   454,   nil,   nil,   nil,
   nil,   175,   nil,   nil,   nil,   460,   461,   462,    50,   nil,
    50,   465,   nil,   nil,   nil,   nil,   420,   421,   422,   nil,
   nil,   nil,   nil,   425,   427,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    50,   nil,    50,   479,   480,   481,   482,   nil,
    50,   nil,   nil,   nil,   485,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   450,   451,   452,
   nil,   nil,   nil,   493,   nil,   nil,   nil,   nil,   459,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   438,   263,   nil,   501,   nil,   nil,   nil,   nil,   273,   nil,
   442,   278,   279,   nil,   nil,   282,   nil,   nil,   nil,   nil,
   nil,   nil,   289,   nil,   nil,   nil,   nil,   484,   nil,   nil,
   457,   nil,   nil,   nil,   489,   nil,   302,   nil,   nil,   nil,
   nil,   491,   nil,   nil,   nil,   305,   nil,   nil,   314,   nil,
   316,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   222,   225,   nil,   500,   246,   247,   248,
   249,   250,   251,   252,   254,   256,   257,   nil,   nil,   nil,
   nil,   nil,   nil,   490,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   494,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,    50,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    50,
    50,   nil,   nil,   383,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   390,   nil,   nil,   nil,    50,    50,    50,
   nil,   398,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
   nil,   nil,   nil,   nil,   nil,   332,   333,   334,   335,   336,
   337,   338,   339,   340,   342,   344,   345,   346,   347,   348,
   349,   350,   351,   352,   354,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   407,   nil,   nil,   412,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   430,   nil,   435,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   440 ]

racc_goto_check = [
    24,    94,    95,   102,    54,   105,    83,    24,    84,    27,
    27,    87,    75,    33,    91,    33,    91,    40,    55,    47,
    90,    89,    90,    89,    51,    29,    51,    38,    85,    90,
    89,    75,    47,    54,    54,     7,     7,    35,    25,     7,
     7,     7,    29,    29,    35,    80,    75,    74,    74,    74,
    21,    21,    74,    25,    25,    50,    50,    26,    26,    30,
    78,    32,    79,    86,    69,    39,     7,    53,    44,    46,
    47,     4,   100,     3,   103,     2,   107,   109,   111,   112,
   113,    33,    33,     1,    24,   nil,   nil,   nil,   nil,   nil,
   nil,   105,   105,   nil,   nil,    84,   nil,   nil,   nil,    36,
   nil,   nil,   nil,   nil,    34,   nil,    36,   nil,    24,    24,
   nil,    55,   nil,    87,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    35,   nil,   nil,   nil,    54,   nil,    40,   nil,   nil,
   nil,   nil,   nil,    75,    91,   nil,     5,   nil,   nil,   nil,
   nil,   nil,     7,     5,   nil,    35,    35,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,    34,
   nil,   nil,    34,    34,    34,    24,   nil,   nil,   nil,   nil,
   nil,   105,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,
   nil,   nil,   nil,    36,   nil,   nil,    24,   nil,    24,    34,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    35,   nil,   nil,   nil,   nil,    36,    36,   nil,
    24,    24,    24,    24,    24,    24,    34,    24,    24,   nil,
     5,   nil,   nil,    35,   nil,    35,    75,    75,   nil,    34,
   nil,   nil,   nil,    87,   nil,    27,    27,    87,   nil,    35,
   nil,   nil,   nil,   nil,     5,     5,   nil,    35,    35,    35,
    35,    35,    35,   nil,    35,    35,    35,    35,    33,   nil,
    24,   nil,    24,    84,    36,    34,   nil,    34,    29,    29,
    38,    38,   nil,   nil,   nil,   nil,    34,   nil,    34,   nil,
   nil,   nil,   nil,   nil,    24,    36,    24,    36,   nil,     6,
   nil,   nil,    24,   nil,   nil,   nil,   nil,    35,   nil,    35,
   nil,    36,    33,   nil,   nil,   nil,   nil,   nil,   nil,    36,
    36,    36,    36,    36,    36,   nil,    36,    36,    36,    36,
   nil,    35,     5,    35,     5,   nil,   nil,   nil,   nil,    35,
   nil,   nil,   nil,     6,   nil,     6,    83,   nil,   nil,   nil,
   nil,   nil,    54,   nil,    34,    34,     5,     5,     5,     5,
     5,     5,    87,     6,   nil,     6,   nil,   nil,   nil,    36,
   nil,    36,   102,    94,    95,     6,     6,     6,     6,     6,
     6,   nil,   nil,     6,     6,     6,     6,   nil,   nil,   nil,
    68,   nil,   nil,    36,   nil,    36,   nil,   nil,   nil,   nil,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     6,     6,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    68,     6,     6,    37,    54,
     5,   nil,     5,   nil,   nil,    37,   nil,     6,     5,     6,
   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,    34,
   nil,   nil,   nil,    82,   nil,     6,   nil,   nil,   nil,   nil,
    54,   nil,   nil,   nil,   nil,   nil,    82,   nil,    82,   nil,
    24,    24,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    68,   nil,    24,
    24,    24,    35,    35,   nil,   nil,   nil,    68,    68,   nil,
    68,    24,    68,   nil,   nil,   nil,   nil,    35,    35,    35,
    68,   nil,    37,    68,    68,   nil,   nil,   nil,    68,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    35,    35,    35,     6,
   nil,    34,   nil,   nil,   nil,   nil,    37,    37,    35,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,
    82,   nil,   nil,   nil,    36,    36,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,
    36,    36,   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil,
     6,   nil,   nil,     6,   nil,   nil,   nil,   nil,    36,    36,
    36,   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,     5,     5,     5,    68,
   nil,   nil,   nil,   nil,    37,   nil,    37,   nil,   nil,    68,
    68,   nil,   nil,   nil,   nil,     5,     5,     5,     6,   nil,
    37,   nil,   nil,   nil,   nil,   nil,   nil,     5,    37,    37,
    37,    37,    37,    37,   nil,    37,    37,    37,    37,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    82,     6,    82,
   nil,   nil,   nil,   nil,     6,     6,   nil,    82,   nil,     6,
   nil,    82,   nil,   nil,    82,   nil,     6,   nil,   nil,   nil,
   nil,    45,   nil,   nil,   nil,     6,     6,     6,    37,   nil,
    37,     6,   nil,   nil,   nil,   nil,    68,    68,    68,   nil,
   nil,   nil,   nil,    68,    68,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,   nil,    37,     6,     6,     6,     6,   nil,
    37,   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    68,    68,    68,
   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,    68,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    82,    45,   nil,     6,   nil,   nil,   nil,   nil,    45,   nil,
    82,    45,    45,   nil,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,    45,   nil,   nil,   nil,   nil,    68,   nil,   nil,
    82,   nil,   nil,   nil,    68,   nil,    45,   nil,   nil,   nil,
   nil,    68,   nil,   nil,   nil,    45,   nil,   nil,    45,   nil,
    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   114,   114,   nil,    68,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   nil,   nil,   nil,
   nil,   nil,   nil,    82,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    82,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    37,    37,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    37,
    37,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,   nil,   nil,   nil,    37,    37,    37,
   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,
   nil,   nil,   nil,   nil,   nil,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    45,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   nil,    45,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45 ]

racc_goto_pointer = [
   nil,    83,    75,    71,    71,   136,   255,   -50,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  -167,   nil,   nil,     0,  -164,  -162,  -210,   nil,  -177,
    30,   nil,  -214,  -190,    73,    37,    99,   418,  -175,    34,
   -16,   nil,   nil,   nil,    34,   595,  -291,  -124,   nil,   nil,
   -92,  -236,   nil,  -291,   -35,   -11,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   319,   -96,
   nil,   nil,   nil,   nil,   -18,  -147,   nil,   nil,  -220,  -218,
  -330,   nil,   364,  -158,  -179,  -337,  -303,   -66,   nil,   -51,
   -53,  -366,   nil,   nil,   -75,   -74,   nil,   nil,   nil,   nil,
  -229,   nil,   -80,  -368,   nil,  -306,   nil,  -126,   nil,   -21,
   nil,   -22,  -126,   -85,   689,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   276,   165,   nil,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,   141,    25,    28,    26,    27,    29,
   nil,    30,   nil,   nil,   223,   139,   140,   142,    31,   194,
   144,    32,    33,    34,   nil,   nil,   nil,   151,   146,   147,
   nil,   nil,   148,   nil,    35,   154,    40,    41,    42,    43,
    44,    45,    46,    47,    57,    58,    59,    60,   nil,   nil,
    62,    63,    64,    65,   nil,   183,    66,    67,   nil,   nil,
   nil,    70,   164,   nil,   nil,   nil,   nil,   nil,    72,   nil,
   nil,   nil,    74,    76,   nil,   nil,    77,   179,    79,    81,
   nil,    83,   nil,   nil,    92,   nil,    94,   nil,    98,   nil,
   100,   nil,   nil,   357,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 93, :_reduce_1,
  1, 93, :_reduce_2,
  1, 93, :_reduce_3,
  1, 94, :_reduce_none,
  2, 94, :_reduce_5,
  2, 94, :_reduce_6,
  1, 96, :_reduce_7,
  3, 96, :_reduce_8,
  3, 96, :_reduce_9,
  4, 97, :_reduce_10,
  4, 97, :_reduce_11,
  4, 97, :_reduce_12,
  4, 97, :_reduce_13,
  4, 97, :_reduce_14,
  4, 97, :_reduce_15,
  3, 97, :_reduce_16,
  2, 97, :_reduce_17,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 100, :_reduce_none,
  4, 112, :_reduce_31,
  4, 112, :_reduce_32,
  1, 112, :_reduce_none,
  1, 113, :_reduce_34,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 115, :_reduce_none,
  4, 115, :_reduce_38,
  4, 115, :_reduce_39,
  4, 117, :_reduce_40,
  4, 117, :_reduce_41,
  1, 117, :_reduce_42,
  1, 117, :_reduce_43,
  1, 114, :_reduce_none,
  2, 114, :_reduce_45,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  0, 124, :_reduce_48,
  2, 124, :_reduce_49,
  1, 125, :_reduce_none,
  1, 125, :_reduce_51,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 118, :_reduce_57,
  2, 123, :_reduce_58,
  1, 123, :_reduce_none,
  2, 133, :_reduce_60,
  5, 134, :_reduce_61,
  2, 135, :_reduce_62,
  1, 136, :_reduce_63,
  3, 136, :_reduce_64,
  0, 132, :_reduce_65,
  1, 132, :_reduce_none,
  5, 140, :_reduce_67,
  5, 140, :_reduce_68,
  1, 141, :_reduce_69,
  1, 144, :_reduce_70,
  1, 142, :_reduce_71,
  5, 142, :_reduce_72,
  0, 145, :_reduce_73,
  3, 145, :_reduce_74,
  1, 130, :_reduce_75,
  1, 130, :_reduce_76,
  1, 130, :_reduce_77,
  1, 130, :_reduce_78,
  1, 130, :_reduce_79,
  0, 99, :_reduce_80,
  1, 99, :_reduce_none,
  1, 131, :_reduce_82,
  2, 131, :_reduce_83,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 148, :_reduce_97,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 158, :_reduce_108,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  4, 108, :_reduce_112,
  1, 162, :_reduce_none,
  1, 120, :_reduce_114,
  6, 163, :_reduce_115,
  1, 164, :_reduce_none,
  4, 109, :_reduce_117,
  3, 165, :_reduce_118,
  4, 110, :_reduce_119,
  4, 110, :_reduce_120,
  4, 168, :_reduce_121,
  5, 169, :_reduce_122,
  5, 169, :_reduce_123,
  3, 170, :_reduce_124,
  1, 172, :_reduce_125,
  4, 172, :_reduce_126,
  2, 171, :_reduce_127,
  3, 171, :_reduce_128,
  5, 111, :_reduce_129,
  4, 153, :_reduce_130,
  1, 173, :_reduce_131,
  4, 166, :_reduce_132,
  0, 175, :_reduce_133,
  7, 175, :_reduce_134,
  0, 178, :_reduce_135,
  4, 178, :_reduce_136,
  0, 176, :_reduce_137,
  2, 176, :_reduce_138,
  0, 177, :_reduce_139,
  2, 177, :_reduce_140,
  6, 151, :_reduce_141,
  5, 180, :_reduce_142,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 183, :_reduce_none,
  1, 183, :_reduce_none,
  6, 152, :_reduce_147,
  5, 184, :_reduce_148,
  3, 149, :_reduce_149,
  5, 149, :_reduce_150,
  4, 149, :_reduce_151,
  3, 186, :_reduce_152,
  4, 185, :_reduce_153,
  3, 188, :_reduce_154,
  4, 187, :_reduce_155,
  6, 187, :_reduce_156,
  5, 187, :_reduce_157,
  3, 189, :_reduce_158,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  5, 150, :_reduce_161,
  4, 190, :_reduce_162,
  6, 155, :_reduce_163,
  10, 191, :_reduce_164,
  1, 192, :_reduce_165,
  3, 192, :_reduce_166,
  4, 154, :_reduce_167,
  3, 193, :_reduce_168,
  5, 194, :_reduce_169,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  2, 101, :_reduce_172,
  2, 102, :_reduce_173,
  1, 103, :_reduce_174,
  1, 104, :_reduce_175,
  2, 105, :_reduce_176,
  2, 106, :_reduce_177,
  2, 107, :_reduce_178,
  5, 127, :_reduce_179,
  1, 196, :_reduce_180,
  5, 128, :_reduce_181,
  1, 198, :_reduce_182,
  4, 116, :_reduce_183,
  1, 199, :_reduce_184,
  1, 159, :_reduce_185,
  4, 156, :_reduce_186,
  1, 200, :_reduce_187,
  1, 201, :_reduce_188,
  3, 201, :_reduce_189,
  4, 201, :_reduce_190,
  4, 157, :_reduce_191,
  1, 202, :_reduce_192,
  1, 203, :_reduce_193,
  2, 203, :_reduce_194,
  7, 204, :_reduce_195,
  5, 204, :_reduce_196,
  1, 174, :_reduce_197,
  2, 174, :_reduce_198,
  5, 174, :_reduce_199,
  5, 174, :_reduce_200,
  5, 174, :_reduce_201,
  0, 143, :_reduce_202,
  1, 143, :_reduce_203,
  4, 143, :_reduce_204,
  4, 143, :_reduce_205,
  4, 143, :_reduce_206,
  1, 205, :_reduce_207,
  5, 205, :_reduce_208,
  5, 205, :_reduce_209,
  5, 205, :_reduce_210,
  1, 122, :_reduce_211,
  2, 122, :_reduce_212,
  2, 147, :_reduce_213,
  2, 147, :_reduce_214,
  3, 147, :_reduce_215,
  3, 147, :_reduce_216,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_219,
  3, 147, :_reduce_220,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_249,
  2, 147, :_reduce_250,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 207, :_reduce_none,
  2, 207, :_reduce_none,
  2, 167, :_reduce_none,
  2, 167, :_reduce_none,
  0, 98, :_reduce_none,
  2, 98, :_reduce_none,
  0, 182, :_reduce_263,
  0, 181, :_reduce_264,
  0, 160, :_reduce_265,
  0, 197, :_reduce_266,
  0, 138, :_reduce_267,
  0, 137, :_reduce_268 ]

racc_reduce_n = 269

racc_shift_n = 503

racc_token_table = {
  false => 0,
  :error => 1,
  :LOWER => 2,
  :MOD_IF => 3,
  :MOD_UNLESS => 4,
  :MOD_WHILE => 5,
  :MOD_UNTIL => 6,
  "=" => 7,
  :DO => 8,
  :LBRACE_I => 9,
  :LBLACK_I => 10,
  :MOD_RESCUE => 11,
  :AND_AND => 12,
  :OR_OR => 13,
  :BANG => 14,
  "." => 15,
  :COLON2 => 16,
  :HIGHER => 17,
  :NL => 18,
  :EOF => 19,
  "&" => 20,
  ";" => 21,
  "|" => 22,
  :BAR_AND => 23,
  :WILDCARD => 24,
  :WORD => 25,
  ")" => 26,
  :LPARLEN_ARG => 27,
  :END => 28,
  "}" => 29,
  :PATH => 30,
  :TEST => 31,
  :SPECIAL => 32,
  :CLASS => 33,
  :STRING => 34,
  :REGEXP => 35,
  :NUMBER => 36,
  :INTEGER => 37,
  :VARIABLE => 38,
  :PSEUDOVARIABLE => 39,
  :SYMBEG => 40,
  "]" => 41,
  :DEF => 42,
  :ID => 43,
  :ALIAS => 44,
  :BEGIN => 45,
  :RESCUE => 46,
  :ASSOC => 47,
  :ELSE => 48,
  :ENSURE => 49,
  :WHILE => 50,
  :DO_COND => 51,
  :UNTIL => 52,
  :IF => 53,
  :ELSIF => 54,
  :THEN => 55,
  :UNLESS => 56,
  :FOR => 57,
  :IN => 58,
  :CASE => 59,
  :WHEN => 60,
  :BREAK => 61,
  :NEXT => 62,
  :REDO => 63,
  :Retry => 64,
  :RAISE => 65,
  :RETURN => 66,
  :YIELD => 67,
  "(" => 68,
  :XSTRING_END => 69,
  :XSTRING_BEG => 70,
  "$" => 71,
  :RUBYEXP => 72,
  :LBLACK_A => 73,
  "," => 74,
  :LBRACE_H => 75,
  ">" => 76,
  "<" => 77,
  :FID => 78,
  :REDIR_WORD => 79,
  :GREATER_GREATER => 80,
  :GREATER_BAR => 81,
  :LESS_GREATER => 82,
  :LESS_LESS => 83,
  :LESS_LESS_MINUS => 84,
  :LESS_LESS_LESS => 85,
  :LESS_AND => 86,
  :GREATER_AND => 87,
  "-" => 88,
  :AND_GREATER => 89,
  :AND_GREATER_GREATER => 90,
  :ID2 => 91 }

racc_nt_base = 92

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LOWER",
  "MOD_IF",
  "MOD_UNLESS",
  "MOD_WHILE",
  "MOD_UNTIL",
  "\"=\"",
  "DO",
  "LBRACE_I",
  "LBLACK_I",
  "MOD_RESCUE",
  "AND_AND",
  "OR_OR",
  "BANG",
  "\".\"",
  "COLON2",
  "HIGHER",
  "NL",
  "EOF",
  "\"&\"",
  "\";\"",
  "\"|\"",
  "BAR_AND",
  "WILDCARD",
  "WORD",
  "\")\"",
  "LPARLEN_ARG",
  "END",
  "\"}\"",
  "PATH",
  "TEST",
  "SPECIAL",
  "CLASS",
  "STRING",
  "REGEXP",
  "NUMBER",
  "INTEGER",
  "VARIABLE",
  "PSEUDOVARIABLE",
  "SYMBEG",
  "\"]\"",
  "DEF",
  "ID",
  "ALIAS",
  "BEGIN",
  "RESCUE",
  "ASSOC",
  "ELSE",
  "ENSURE",
  "WHILE",
  "DO_COND",
  "UNTIL",
  "IF",
  "ELSIF",
  "THEN",
  "UNLESS",
  "FOR",
  "IN",
  "CASE",
  "WHEN",
  "BREAK",
  "NEXT",
  "REDO",
  "Retry",
  "RAISE",
  "RETURN",
  "YIELD",
  "\"(\"",
  "XSTRING_END",
  "XSTRING_BEG",
  "\"$\"",
  "RUBYEXP",
  "LBLACK_A",
  "\",\"",
  "LBRACE_H",
  "\">\"",
  "\"<\"",
  "FID",
  "REDIR_WORD",
  "GREATER_GREATER",
  "GREATER_BAR",
  "LESS_GREATER",
  "LESS_LESS",
  "LESS_LESS_MINUS",
  "LESS_LESS_LESS",
  "LESS_AND",
  "GREATER_AND",
  "\"-\"",
  "AND_GREATER",
  "AND_GREATER_GREATER",
  "ID2",
  "$start",
  "inputunit",
  "simple_list",
  "simple_list_terminator",
  "simple_list1",
  "logical_command",
  "opt_nl",
  "simple_command_element_list",
  "pipeline_command",
  "break_command",
  "next_command",
  "redo_command",
  "retry_command",
  "raise_command",
  "return_command",
  "yield_command",
  "assgin_command",
  "class_command",
  "def_command",
  "alias_command",
  "pipeline",
  "pipeline_element",
  "command",
  "strict_pipeline",
  "trivial_command",
  "strict_pipeline1",
  "simple_command",
  "strict_command",
  "index_ref_command",
  "shell_command",
  "redirection_list",
  "simple_strict_command",
  "command_element_list",
  "command_element",
  "command_element_base",
  "group_command",
  "xstring_command",
  "literal",
  "simple_command_header",
  "simple_command_element_list1",
  "opt_do_block",
  "simple_command_lparen",
  "simple_command_lparen_header",
  "simple_command_lparen_header0",
  "simple_command_element_list_p",
  "indent_pop",
  "lex_end",
  "simple_command_element",
  "do_block",
  "do_block_do",
  "opt_block_arg",
  "compound_list0",
  "do_block_li",
  "block_arg",
  "id",
  "redirection",
  "literal_command",
  "if_command",
  "unless_command",
  "while_command",
  "until_command",
  "begin_command",
  "case_command",
  "for_command",
  "array",
  "hash",
  "symbol",
  "ruby_exp",
  "lex_beg",
  "sym",
  "assginable",
  "index_ref",
  "referenceable",
  "class_command_class",
  "body_list",
  "opt_terms",
  "def_command_def0",
  "def_command_def1",
  "func_arg_list",
  "func_arg_list1",
  "func_arg_list0",
  "begin_command_begin",
  "compound_list",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "exc_var",
  "then",
  "while_command_while",
  "cond_pop",
  "cond_push",
  "do",
  "until_command_until",
  "if_head",
  "else_else",
  "elsif_clause",
  "if_head_if",
  "elsif_elsif",
  "unless_command_unless",
  "for_command_for",
  "for_arg",
  "case_command_case",
  "case_body",
  "cases",
  "group_command_group",
  "lex_arg",
  "xstring_command_xstring",
  "trivial_command0",
  "array_array",
  "array_element_list",
  "hash_hash",
  "hash_element_list",
  "hash_assoc",
  "compound_list1",
  "redirection_element",
  "opt_nl_arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_1(val, _values, result)
    		@lex.continue = false
		_values.push Node::InputUnit(val[0], val[1])
	        yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_2(val, _values, result)
    		@lex.continue = false
		_values.push Node::NOP
  		yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_3(val, _values, result)
                    _values.push Node::EOF
		yyaccept
	    
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_5(val, _values, result)
    		result.last_command_to_async
#		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_6(val, _values, result)
    #		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_7(val, _values, result)
    		result = Node::Sequence(val[0])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_8(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_9(val, _values, result)
    		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_10(val, _values, result)
    		result = Node::LogicalCommandAA(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_11(val, _values, result)
    		result = Node::LogicalCommandOO(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_12(val, _values, result)
    		result = Node::ModIfCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_13(val, _values, result)
    		result = Node::ModUnlessCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_14(val, _values, result)
    		result = Node::ModWhileCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_15(val, _values, result)
    		result = Node::ModUntilCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_16(val, _values, result)
    		result = Node::ModRescueCommand(val[0], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_17(val, _values, result)
    		result = Node::BangCommand(val[1])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.y', 123)
  def _reduce_31(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 133)
  def _reduce_32(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR_AND, val[3])
	    
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.y', 146)
  def _reduce_34(val, _values, result)
    		result = Node::PipelineCommand(val[0])
            
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.y', 154)
  def _reduce_38(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_39(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 165)
  def _reduce_40(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_41(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 180)
  def _reduce_42(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 184)
  def _reduce_43(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.y', 191)
  def _reduce_45(val, _values, result)
    	        result = Node::Redirector(val[0], val[1])
	  
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

module_eval(<<'.,.,', 'parser.y', 200)
  def _reduce_48(val, _values, result)
        		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 204)
  def _reduce_49(val, _values, result)
    		result.push val[1]
	    
    result
  end
.,.,

# reduce 50 omitted

module_eval(<<'.,.,', 'parser.y', 211)
  def _reduce_51(val, _values, result)
    	        yyerror val[0], "syntax error: wildcasd #{val[0].inspect} can't use this place."
	    
    result
  end
.,.,

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'parser.y', 222)
  def _reduce_57(val, _values, result)
    #	       result = Node::SimpleCommand(val[0], val[1], val[2])
	       result = val[0]
	       result.set_args val[1]
	       result.block = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 231)
  def _reduce_58(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0], Node::CommandElementList.new, val[1])
	       result = val[0]
	       result.set_args Node::CommandElementList.new
	       result.block = val[1]

	    
    result
  end
.,.,

# reduce 59 omitted

module_eval(<<'.,.,', 'parser.y', 249)
  def _reduce_60(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0][0], val[0][1], val[1])
	       result = val[0]
	       result.block = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 258)
  def _reduce_61(val, _values, result)
    #	       result = val[0]
	       result = val[0][0]
	       val[1].lparen = val[0][1]
	       result.set_args val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 267)
  def _reduce_62(val, _values, result)
    	       @lex.indent_push(val[1])
#      	       result = val[0]
      	       result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 274)
  def _reduce_63(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 279)
  def _reduce_64(val, _values, result)
    		result = val[0]
  		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 291)
  def _reduce_65(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.y', 297)
  def _reduce_67(val, _values, result)
    	      if val[1]
		result = Node::DoBlock(val[2], val[1])
	      else
		result = Node::DoBlock(val[2])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 305)
  def _reduce_68(val, _values, result)
    	      if val[1]
		result = Node::DoBlock(val[2], val[1])
	      else
		result = Node::DoBlock(val[2])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_69(val, _values, result)
    	      @lex.indent_push(val[0])
      	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 319)
  def _reduce_70(val, _values, result)
    	      @lex.indent_push(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 323)
  def _reduce_71(val, _values, result)
     	      result = nil
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 327)
  def _reduce_72(val, _values, result)
     	      result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 332)
  def _reduce_73(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_DO_BEG
	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 337)
  def _reduce_74(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 343)
  def _reduce_75(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 347)
  def _reduce_76(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 351)
  def _reduce_77(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 355)
  def _reduce_78(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 359)
  def _reduce_79(val, _values, result)
          	       result = Node::SimpleCommand(IDToken.dup_from(val[0], "class"))
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 364)
  def _reduce_80(val, _values, result)
    	       result = Node::CommandElementList.new
	    
    result
  end
.,.,

# reduce 81 omitted

module_eval(<<'.,.,', 'parser.y', 370)
  def _reduce_82(val, _values, result)
    	       result = Node::CommandElementList.new(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 374)
  def _reduce_83(val, _values, result)
    	       result = val[0]
      	       result.push val[1]
	    
    result
  end
.,.,

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.y', 401)
  def _reduce_97(val, _values, result)
    	      result = Node::LiteralCommand(val[0])  
    	    
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.y', 417)
  def _reduce_108(val, _values, result)
    	      result = Node::Symbol(val[2])
	    
    result
  end
.,.,

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.y', 426)
  def _reduce_112(val, _values, result)
                   case val[0].commands.last
	       when Node::SimpleCommand
		  if val[0].commands.last.args.size > 0
		    yyerror val[0], "syntax error not assginable #{val[0].inspect}."
		  end
	       end
	       result = Node::AssginCommand(val[0], val[3])
	    
    result
  end
.,.,

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.y', 445)
  def _reduce_114(val, _values, result)
    		result = Node::IndexRefCommand(*val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 450)
  def _reduce_115(val, _values, result)
    		result = [val[0], val[3]]
	    
    result
  end
.,.,

# reduce 116 omitted

module_eval(<<'.,.,', 'parser.y', 471)
  def _reduce_117(val, _values, result)
    		body = Node::BeginCommand(*val[1])
		result = Node::ClassCommand(val[0], nil, body)
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 477)
  def _reduce_118(val, _values, result)
    		@lex.indent_push(val[0])
		@lex.lex_state = Lex::EXPR_BEG
		result=val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 484)
  def _reduce_119(val, _values, result)
    		body = Node::BeginCommand(*val[1])
		result = Node::DefCommand(val[0], nil, body)
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 489)
  def _reduce_120(val, _values, result)
    		arg = val[0][1]
		body = Node::BeginCommand(*val[1])
		result = Node::DefCommand(val[0][0], arg, body)
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 496)
  def _reduce_121(val, _values, result)
    		@lex.indent_push(val[0])
		@lex.lex_state = Lex::EXPR_BEG
		result = val[1]
  	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 503)
  def _reduce_122(val, _values, result)
    		@lex.indent_push(val[0])
		@lex.lex_state = Lex::EXPR_BEG
		result = [val[1], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 509)
  def _reduce_123(val, _values, result)
    		@lex.indent_push(val[0])
		@lex.lex_state = Lex::EXPR_BEG
		result = [val[1], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 516)
  def _reduce_124(val, _values, result)
    	      result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 521)
  def _reduce_125(val, _values, result)
    	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 525)
  def _reduce_126(val, _values, result)
    	      result = val[0]
	      result.push val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 531)
  def _reduce_127(val, _values, result)
    	       result = [val[1]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 535)
  def _reduce_128(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 541)
  def _reduce_129(val, _values, result)
         		result = Node::AliasCommand(val[1], val[4])
   	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 554)
  def _reduce_130(val, _values, result)
    		result = Node::BeginCommand(*val[1])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 559)
  def _reduce_131(val, _values, result)
    		@lex.indent_push(val[0])
		@lex.lex_state = Lex::EXPR_BEG
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 565)
  def _reduce_132(val, _values, result)
    		result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 570)
  def _reduce_133(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 574)
  def _reduce_134(val, _values, result)
    		result = Node::RescueCommand(val[1], val[2], val[5])
		if val[6]
		   result, t = val[6], result
		   result = [result] unless result.kind_of?(Array)
		   result.unshift t
		else
		   result = Node::RescueCommand(val[1], val[2], val[5])
		end		  
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 585)
  def _reduce_135(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 589)
  def _reduce_136(val, _values, result)
    		result = val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 593)
  def _reduce_137(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 598)
  def _reduce_138(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 602)
  def _reduce_139(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 606)
  def _reduce_140(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 611)
  def _reduce_141(val, _values, result)
    	        result = Node::WhileCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 615)
  def _reduce_142(val, _values, result)
    		@lex.indent_push(val[0])
		result = val[3]
	    
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'parser.y', 626)
  def _reduce_147(val, _values, result)
    		result = Node::UntilCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 631)
  def _reduce_148(val, _values, result)
    		@lex.indent_push(val[0])
		result = val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 638)
  def _reduce_149(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 642)
  def _reduce_150(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 646)
  def _reduce_151(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 651)
  def _reduce_152(val, _values, result)
    		@lex.indent_pop
		@lex.indent_push(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 657)
  def _reduce_153(val, _values, result)
    		result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 661)
  def _reduce_154(val, _values, result)
    		@lex.indent_push(val[0])
		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 667)
  def _reduce_155(val, _values, result)
    		result = Node::IfCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 671)
  def _reduce_156(val, _values, result)
    		result = Node::IfCommand(val[0], val[3], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 675)
  def _reduce_157(val, _values, result)
    		result = Node::IfCommand(val[0], val[3], val[4])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 680)
  def _reduce_158(val, _values, result)
    		@lex.indent_pop
		@lex.indent_push(val[0])
		result = val[2]
	    
    result
  end
.,.,

# reduce 159 omitted

# reduce 160 omitted

module_eval(<<'.,.,', 'parser.y', 691)
  def _reduce_161(val, _values, result)
    		result = Node::IfCommand(val[0], val[2], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 695)
  def _reduce_162(val, _values, result)
    		@lex.indent_push(val[0])
		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 703)
  def _reduce_163(val, _values, result)
    		result = Node::ForCommand(val[0][0], val[0][1], val[3])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 708)
  def _reduce_164(val, _values, result)
    		@lex.indent_push(val[0])
		result = [val[3], val[7]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 714)
  def _reduce_165(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_BEG
	       result = [val[0]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 719)
  def _reduce_166(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 726)
  def _reduce_167(val, _values, result)
    		result = Node::CaseCommand(val[0], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 730)
  def _reduce_168(val, _values, result)
    		@lex.indent_push(val[0])
		result=val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 738)
  def _reduce_169(val, _values, result)
    		case val[4]
		when Array
		  result = val[4]
		  result.unshift Node::WhenCommand(val[1], val[3])
		when nil
		  result = [Node::WhenCommand(val[1], val[3])]
		else
		  result = [Node::WhenCommand(val[1], val[3]), val[4]]
		end
	    
    result
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'parser.y', 774)
  def _reduce_172(val, _values, result)
    		result = Node::BreakCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 779)
  def _reduce_173(val, _values, result)
    		result = Node::NextCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 784)
  def _reduce_174(val, _values, result)
    		result = Node::RedoCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 789)
  def _reduce_175(val, _values, result)
    		result = Node::RetryCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 794)
  def _reduce_176(val, _values, result)
    		result = Node::RaiseCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 799)
  def _reduce_177(val, _values, result)
    		result = Node::ReturnCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 804)
  def _reduce_178(val, _values, result)
    		result = Node::YieldCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 810)
  def _reduce_179(val, _values, result)
    	        result = Node::Group(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 815)
  def _reduce_180(val, _values, result)
    		@lex.indent_push(val[0])
		@lex.lex_state = Lex::EXPR_BEG
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 821)
  def _reduce_181(val, _values, result)
    	        result = Node::XString(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 826)
  def _reduce_182(val, _values, result)
    		@lex.indent_push(val[0])
		@lex.lex_state = Lex::EXPR_BEG
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 868)
  def _reduce_183(val, _values, result)
    		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 873)
  def _reduce_184(val, _values, result)
     	       result.pipeout = :RESULT
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 926)
  def _reduce_185(val, _values, result)
    		result = Node::RubyExp(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 931)
  def _reduce_186(val, _values, result)
    		result = Node::Array(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 936)
  def _reduce_187(val, _values, result)
      		@lex.indent_push(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 941)
  def _reduce_188(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 946)
  def _reduce_189(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 951)
  def _reduce_190(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 957)
  def _reduce_191(val, _values, result)
    		result = Node::Hash(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 961)
  def _reduce_192(val, _values, result)
    		@lex.indent_push(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 966)
  def _reduce_193(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
	        result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 971)
  def _reduce_194(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 976)
  def _reduce_195(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[5]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 981)
  def _reduce_196(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 987)
  def _reduce_197(val, _values, result)
    		result = Node::Sequence()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 991)
  def _reduce_198(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 995)
  def _reduce_199(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 999)
  def _reduce_200(val, _values, result)
    		val[1].last_command_to_async
		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1004)
  def _reduce_201(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1009)
  def _reduce_202(val, _values, result)
     		result = Node::Sequence()
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1013)
  def _reduce_203(val, _values, result)
     		result = val[0]
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1017)
  def _reduce_204(val, _values, result)
     		result = val[0]
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1021)
  def _reduce_205(val, _values, result)
     		val[1].last_command_to_async
 		result = val[0]
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1026)
  def _reduce_206(val, _values, result)
     		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1031)
  def _reduce_207(val, _values, result)
    	        result = Node::Sequence(val[0]) 
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1035)
  def _reduce_208(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1040)
  def _reduce_209(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1046)
  def _reduce_210(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1052)
  def _reduce_211(val, _values, result)
    	    result = [val[0]]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1056)
  def _reduce_212(val, _values, result)
    	    val[0].push val[1]
	    result = val[0]
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1062)
  def _reduce_213(val, _values, result)
    	    result = Node::Redirection(-1, ">", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1067)
  def _reduce_214(val, _values, result)
    	    result = Node::Redirection(-1, "<", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1072)
  def _reduce_215(val, _values, result)
    	    result = Node::Redirection(val[0], ">", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1077)
  def _reduce_216(val, _values, result)
    	    result = Node::Redirection(val[0], "<", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 217 omitted

# reduce 218 omitted

module_eval(<<'.,.,', 'parser.y', 1084)
  def _reduce_219(val, _values, result)
    	    result = Node::Redirection(-1, ">>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1089)
  def _reduce_220(val, _values, result)
    	    result = Node::Redirection(val[0], ">>", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

module_eval(<<'.,.,', 'parser.y', 1128)
  def _reduce_249(val, _values, result)
    	    result = Node::Redirection(-1, "&>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1133)
  def _reduce_250(val, _values, result)
    	    result = Node::Redirection(-1, "&>>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

# reduce 254 omitted

# reduce 255 omitted

# reduce 256 omitted

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

module_eval(<<'.,.,', 'parser.y', 1155)
  def _reduce_263(val, _values, result)
    @lex.cond_push(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1156)
  def _reduce_264(val, _values, result)
    @lex.cond_pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1158)
  def _reduce_265(val, _values, result)
    @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1159)
  def _reduce_266(val, _values, result)
    @lex.lex_state = Lex::EXPR_ARG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1160)
  def _reduce_267(val, _values, result)
    @lex.lex_state = Lex::EXPR_END
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1162)
  def _reduce_268(val, _values, result)
    @lex.indent_pop
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Reish
