#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require "reish/token"
  require "reish/node"

module Reish
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 1020)

  def initialize(lex)
    @yydebug = nil
    @cmpl_mode = nil
    @input_closed = nil
    @err_token = nil

    @lex = lex
  end

  attr_accessor :yydebug
  attr_accessor :cmpl_mode
  attr_accessor :input_closed
  
  attr_reader :err_token

  def next_token
    @lex.racc_token
  end

  def next_roken_cmpl
    @lex.racc_token_cmpl
  end

    def on_error(token_id, token, value_stack)

      if @yydebug || Reish::debug_cmpl?
	require "pp"
  
	puts "Reish: parse error: token line: #{token.line_no} char: #{token.char_no}"
	puts "TOKEN_ID: #{token_to_str(token_id)}"
	puts "TOKEN: #{token.pretty_inspect}"
	puts "VAULE_STACK: \n#{value_stack.pretty_inspect}"
#      puts "_VAULES: \n#{self.pretty_inspect}"
#      yyerrok
      end
      
      case
      when @cmpl_mode
	@cmpl_mode = value_stack
	Reish::Fail ParserComplSupp
      when @input_closed && token.kind_of?(EOFToken)
	Reish::Fail ParserClosingEOFSupp
#      when @input_closed
#	#Reish::Fail ParserClosingSupp
      else
	@err_token = token
	super
      end
    end

  def yyerror(token, msg)
    raise ParseError, msg
  end
    
# Begin Emacs Environment
# Local Variables:
#   mode: ruby
# End:
...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'131,132,140,404,229,140,236,86,228,235,86,236,359,86,235,360,135,122',
'403,129,353,90,91,131,132,49,50,51,52,53,54,59,369,140,92,93,86,131',
'132,135,122,348,325,236,361,329,235,325,49,50,51,52,53,54,59,87,129',
'376,87,80,81,87,82,83,84,86,85,108,109,110,111,112,113,114,115,116,117',
'118,119,325,120,121,80,81,87,82,83,84,86,85,108,109,110,111,112,113',
'114,115,116,117,118,119,7,120,121,-114,96,97,98,99,333,334,322,87,100',
'94,95,140,35,36,37,49,50,51,52,53,54,59,-114,63,86,64,65,104,105,440',
'87,66,140,67,69,152,380,70,71,316,72,7,73,74,75,76,77,78,79,80,81,140',
'82,83,84,140,85,35,36,37,49,50,51,52,53,54,59,150,63,86,64,65,87,152',
'102,103,66,140,67,69,131,132,70,71,140,72,7,73,74,75,76,77,78,79,80',
'81,140,82,83,84,140,85,35,36,37,49,50,51,52,53,54,59,140,63,86,64,65',
'87,301,299,351,66,353,67,69,299,140,70,71,140,72,7,73,74,75,76,77,78',
'79,80,81,140,82,83,84,140,85,35,36,37,49,50,51,52,53,54,59,140,63,86',
'64,65,87,140,369,370,66,140,67,69,140,374,70,71,140,72,7,73,74,75,76',
'77,78,79,80,81,377,82,83,84,140,85,35,36,37,49,50,51,52,53,54,59,243',
'63,86,64,65,87,383,388,140,66,140,67,69,397,399,70,71,140,72,7,73,74',
'75,76,77,78,79,80,81,140,82,83,84,140,85,35,36,37,49,50,51,52,53,54',
'59,140,63,86,64,65,87,140,140,410,66,411,67,69,140,413,70,71,414,72',
'7,73,74,75,76,77,78,79,80,81,415,82,83,84,416,85,35,36,37,49,50,51,52',
'53,54,59,140,63,86,64,65,87,140,140,140,66,236,67,69,235,140,70,71,140',
'72,234,73,74,75,76,77,78,79,80,81,140,82,83,84,353,85,7,429,187,188',
'3,4,189,190,191,192,193,194,195,196,140,87,35,36,37,49,50,51,52,53,54',
'59,140,63,86,64,65,-111,332,140,-114,66,140,67,69,104,105,70,71,140',
'72,7,73,74,75,76,77,78,79,80,81,140,82,83,84,140,85,35,36,37,49,50,51',
'52,53,54,59,140,63,86,64,65,87,140,140,140,66,168,67,69,140,140,70,71',
'140,72,7,73,74,75,76,77,78,79,80,81,140,82,83,84,452,85,35,36,37,49',
'50,51,52,53,54,59,143,63,86,64,65,87,142,140,316,66,140,67,69,88,140',
'70,71,464,72,7,73,74,75,76,77,78,79,80,81,465,82,83,84,140,85,35,36',
'37,49,50,51,52,53,54,59,471,63,86,64,65,87,,,,66,,67,69,,,70,71,,72',
'7,73,74,75,76,77,78,79,80,81,,82,83,84,,85,35,36,37,49,50,51,52,53,54',
'59,,63,86,64,65,87,,,,66,,67,69,,,70,71,,72,7,73,74,75,76,77,78,79,80',
'81,,82,83,84,,85,35,36,37,49,50,51,52,53,54,59,,63,86,64,65,87,,,,66',
',67,69,,,70,71,,72,7,73,74,75,76,77,78,79,80,81,,82,83,84,,85,35,36',
'37,49,50,51,52,53,54,59,,63,86,64,65,87,,,,66,,67,69,,,70,71,,72,7,73',
'74,75,76,77,78,79,80,81,,82,83,84,,85,35,36,37,49,50,51,52,53,54,59',
',63,86,64,65,87,,,,66,,67,69,,,70,71,,72,7,73,74,75,76,77,78,79,80,81',
',82,83,84,,85,35,36,37,49,50,51,52,53,54,59,,63,86,64,65,87,,,,66,,67',
'69,,,70,71,,72,7,73,74,75,76,77,78,79,80,81,,82,83,84,,85,35,36,37,49',
'50,51,52,53,54,59,,63,86,64,65,87,,,,66,,67,69,,,70,71,,72,7,73,74,75',
'76,77,78,79,80,81,,82,83,84,,85,35,36,37,49,50,51,52,53,54,59,,63,86',
'64,65,87,,,,66,,67,69,,,70,71,,72,7,73,74,75,76,77,78,79,80,81,,82,83',
'84,,85,35,36,37,49,50,51,52,53,54,59,,63,86,64,65,87,,,,66,,67,69,,',
'70,71,,72,7,73,74,75,76,77,78,79,80,81,,82,83,84,,85,35,36,37,49,50',
'51,52,53,54,59,,63,86,64,65,87,,,,66,,67,69,,,70,71,,72,7,73,74,75,76',
'77,78,79,80,81,,82,83,84,,85,35,36,37,49,50,51,52,53,54,59,,63,86,64',
'65,87,,,,66,,67,69,,,70,71,,72,,73,74,75,76,77,78,79,80,81,,82,83,84',
',85,,96,97,98,99,,,135,122,100,94,95,,,,87,49,50,51,52,53,54,59,,96',
'97,98,99,,,135,122,100,94,95,355,,356,357,49,50,51,52,53,54,59,,,,,80',
'81,,82,83,84,,85,108,109,110,111,112,113,114,115,116,117,118,119,,120',
'121,80,81,,82,83,84,,85,108,109,110,111,112,113,114,115,116,117,118',
'119,,120,121,135,122,,,,,,,,49,50,51,52,53,54,59,,-255,-255,-255,-255',
',,135,122,100,94,95,,,,,49,50,51,52,53,54,59,,,,,80,81,,82,83,84,,85',
'108,109,110,111,112,113,114,115,116,117,118,119,,120,121,80,81,,82,83',
'84,,85,108,109,110,111,112,113,114,115,116,117,118,119,,120,121,135',
'122,,,,,,,,49,50,51,52,53,54,59,,96,97,98,99,,,135,122,100,94,95,,,',
',49,50,51,52,53,54,59,,,,,80,81,,82,83,84,,85,108,109,110,111,112,113',
'114,115,116,117,118,119,,120,121,80,81,,82,83,84,,85,108,109,110,111',
'112,113,114,115,116,117,118,119,,120,121,135,122,,,,,,,,49,50,51,52',
'53,54,59,,96,97,98,99,,,135,122,100,94,95,,,,,49,50,51,52,53,54,59,',
',,,80,81,,82,83,84,,85,108,109,110,111,112,113,114,115,116,117,118,119',
',120,121,80,81,,82,83,84,,85,108,109,110,111,112,113,114,115,116,117',
'118,119,,120,121,135,122,,,,,,,,49,50,51,52,53,54,59,,96,97,98,99,,',
'185,122,100,94,95,,,,,49,50,51,52,53,54,59,,,,,80,81,,82,83,84,,85,108',
'109,110,111,112,113,114,115,116,117,118,119,,120,121,80,81,,82,83,84',
',85,-255,-255,-255,-255,185,122,,,100,94,95,,214,49,50,51,52,53,54,59',
',,185,122,,,,,,,,49,50,51,52,53,54,59,,,,,,,,,,80,81,,82,83,84,,85,',
',,,,,,,,,80,81,216,82,83,84,,85,96,97,98,99,185,122,,,100,94,95,,295',
'49,50,51,52,53,54,59,,,185,122,,,,,,,,49,50,51,52,53,54,59,,,,,,,,,',
'80,81,,82,83,84,,85,,,,,,,,,,,80,81,297,82,83,84,,85,-255,-255,-255',
'-255,185,122,,,100,94,95,,285,49,50,51,52,53,54,59,96,97,98,99,96,97',
'98,99,100,94,95,,100,94,95,236,,,235,236,,,235,,,,,80,81,,82,83,84,',
'85,,35,36,37,49,50,51,52,53,54,59,,283,86,,65,325,,,,66,,67,69,,,70',
'71,,72,,,,,,,,,80,81,,82,83,84,,85,35,36,37,49,50,51,52,53,54,59,,,86',
',65,87,,,,66,,67,69,,,70,71,,72,,,,,,,,,80,81,,82,83,84,,85,35,36,37',
'49,50,51,52,53,54,59,,,86,,65,87,,,,66,,67,69,,,70,71,,72,,,,,,,,,80',
'81,,,83,84,,85,35,36,37,49,50,51,52,53,54,59,,,86,,65,87,,,,66,,67,69',
',,70,71,,72,,,,,,,,,80,81,,,83,84,,85,35,36,37,49,50,51,52,53,54,59',
',,86,,65,87,,,,66,,67,69,,,70,71,,72,,,,,,,,,80,81,,,83,84,,85,35,36',
'37,49,50,51,52,53,54,59,,,86,,65,87,,,,66,,67,69,,,70,71,,72,,,,,,,',
',80,81,,,83,84,,85,35,36,37,49,50,51,52,53,54,59,,,86,,65,87,,,,66,',
'67,69,,,70,71,,72,,,,,431,,,,80,81,304,122,83,84,,85,,,,49,50,51,52',
'53,54,59,96,97,98,99,,87,,,100,94,95,185,122,,,236,,,235,,49,50,51,52',
'53,54,59,80,81,,82,83,84,,85,185,122,,,,,,,,49,50,51,52,53,54,59,325',
',,80,81,,82,83,84,,85,185,122,,,,,,,,49,50,51,52,53,54,59,80,81,,82',
'83,84,,85,185,122,,,,,,,,49,50,51,52,53,54,59,,,,80,81,,82,83,84,,85',
'185,122,,,,,,,,49,50,51,52,53,54,59,80,81,,82,83,84,,85,185,122,,,,',
',,,49,50,51,52,53,54,59,,,,80,81,,82,83,84,,85,185,122,,,,,,,,49,50',
'51,52,53,54,59,80,81,,82,83,84,,85,185,122,,,,,,,,49,50,51,52,53,54',
'59,,,,80,81,,82,83,84,,85,185,122,,,,,,,,49,50,51,52,53,54,59,80,81',
',82,83,84,,85,185,122,,,,,,,,49,50,51,52,53,54,59,,,,80,81,,82,83,84',
',85,185,122,,,,,,,,49,50,51,52,53,54,59,80,81,,82,83,84,,85,185,122',
',,,,,,,49,50,51,52,53,54,59,,,,80,81,,82,83,84,,85,304,122,,,,,,,,49',
'50,51,52,53,54,59,80,81,,82,83,84,392,85,185,122,,,,,,,,49,50,51,52',
'53,54,59,,,,80,81,,82,83,84,,85,185,122,,,,,,,,49,50,51,52,53,54,59',
'80,81,,82,83,84,,85,304,122,,,,,,,,49,50,51,52,53,54,59,,,,80,81,,82',
'83,84,,85,304,122,,,,,,,,49,50,51,52,53,54,59,80,81,,82,83,84,,85,185',
'122,,,,,,,,49,50,51,52,53,54,59,,,,80,81,,82,83,84,,85,185,122,,,,,',
',,49,50,51,52,53,54,59,80,81,,82,83,84,,85,185,122,,,,,,,,49,50,51,52',
'53,54,59,,,,80,81,,82,83,84,,85,185,122,,,,,,,,49,50,51,52,53,54,59',
'80,81,,82,83,84,,85,185,122,,,,,,,,49,50,51,52,53,54,59,,,,80,81,,82',
'83,84,,85,185,122,,,,,,,,49,50,51,52,53,54,59,80,81,,82,83,84,,85,185',
'122,,,,,,,,49,50,51,52,53,54,59,,,,80,81,,82,83,84,,85,185,122,,,,,',
',,49,50,51,52,53,54,59,80,81,,82,83,84,,85,185,122,,,,,,,,49,50,51,52',
'53,54,59,,,,80,81,,82,83,84,,85,304,122,,,,,,,,49,50,51,52,53,54,59',
'80,81,,82,83,84,,85,185,122,,,,,,,,49,50,51,52,53,54,59,,,,80,81,,82',
'83,84,,85,304,122,,,,,,,,49,50,51,52,53,54,59,80,81,,82,83,84,,85,304',
'122,,,,,,,,49,50,51,52,53,54,59,,,,80,81,,82,83,84,,85,185,122,,,,,',
',,49,50,51,52,53,54,59,80,81,,82,83,84,,85,185,122,,,,,,,,49,50,51,52',
'53,54,59,,,,80,81,,82,83,84,,85,96,97,98,99,96,97,98,99,100,94,95,,100',
'94,95,359,80,81,360,82,83,84,,85,96,97,98,99,-255,-255,-255,-255,100',
'94,95,,100,94,95,359,,,360,,,,,361,108,109,110,111,112,113,114,115,116',
'117,118,119,,120,121,,,,,,,,,361,108,109,110,111,112,113,114,115,116',
'117,118,119,,120,121,197,198,,,199,200,201,202,203,204,205,206,96,97',
'98,99,,,,,100,94,95' ]
        racc_action_table = arr = ::Array.new(2980, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'30,30,337,367,141,419,324,64,141,324,434,406,453,141,406,453,30,30,367',
'30,444,2,2,127,127,30,30,30,30,30,30,30,444,309,5,5,313,255,255,127',
'127,309,324,391,453,249,391,406,127,127,127,127,127,127,127,64,255,337',
'434,30,30,141,30,30,30,381,30,30,30,30,30,30,30,30,30,30,30,30,30,391',
'30,30,127,127,313,127,127,127,63,127,127,127,127,127,127,127,127,127',
'127,127,127,127,154,127,127,253,6,6,6,6,253,253,245,381,6,6,6,244,154',
'154,154,154,154,154,154,154,154,154,268,154,154,154,154,268,268,425',
'63,154,342,154,154,425,342,154,154,239,154,171,154,154,154,154,154,154',
'154,154,154,237,154,154,154,224,154,171,171,171,171,171,171,171,171',
'171,171,68,171,171,171,171,154,68,19,19,171,298,171,171,32,32,171,171',
'300,171,246,171,171,171,171,171,171,171,171,171,306,171,171,171,307',
'171,246,246,246,246,246,246,246,246,246,246,308,246,246,246,246,171',
'223,222,314,246,315,246,246,221,167,246,246,166,246,7,246,246,246,246',
'246,246,246,246,246,164,246,246,246,163,246,7,7,7,7,7,7,7,7,7,7,155',
'7,7,7,7,246,328,330,331,7,333,7,7,334,336,7,7,152,7,242,7,7,7,7,7,7',
'7,7,7,338,7,7,7,340,7,242,242,242,242,242,242,242,242,242,242,149,242',
'242,242,242,7,345,352,353,242,148,242,242,360,363,242,242,366,242,241',
'242,242,242,242,242,242,242,242,242,147,242,242,242,146,242,241,241',
'241,241,241,241,241,241,241,241,143,241,241,241,241,242,142,376,378',
'241,379,241,241,105,382,241,241,384,241,240,241,241,241,241,241,241',
'241,241,241,385,241,241,241,386,241,240,240,240,240,240,240,240,240',
'240,240,388,240,240,240,240,241,104,393,394,240,144,240,240,144,395',
'240,240,400,240,144,240,240,240,240,240,240,240,240,240,401,240,240',
'240,402,240,0,405,110,110,0,0,110,110,110,110,110,110,110,110,103,240',
'0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,24,252,99,24,0,98,0,0,24,24,0,0,97,0',
'176,0,0,0,0,0,0,0,0,0,96,0,0,0,95,0,176,176,176,176,176,176,176,176',
'176,176,430,176,176,176,176,0,432,433,94,176,88,176,176,70,69,176,176',
'438,176,172,176,176,176,176,176,176,176,176,176,439,176,176,176,442',
'176,172,172,172,172,172,172,172,172,172,172,62,172,172,172,172,176,60',
'33,447,172,451,172,172,1,457,172,172,459,172,153,172,172,172,172,172',
'172,172,172,172,460,172,172,172,468,172,153,153,153,153,153,153,153',
'153,153,153,470,153,153,153,153,172,,,,153,,153,153,,,153,153,,153,173',
'153,153,153,153,153,153,153,153,153,,153,153,153,,153,173,173,173,173',
'173,173,173,173,173,173,,173,173,173,173,153,,,,173,,173,173,,,173,173',
',173,175,173,173,173,173,173,173,173,173,173,,173,173,173,,173,175,175',
'175,175,175,175,175,175,175,175,,175,175,175,175,173,,,,175,,175,175',
',,175,175,,175,420,175,175,175,175,175,175,175,175,175,,175,175,175',
',175,420,420,420,420,420,420,420,420,420,420,,420,420,420,420,175,,',
',420,,420,420,,,420,420,,420,421,420,420,420,420,420,420,420,420,420',
',420,420,420,,420,421,421,421,421,421,421,421,421,421,421,,421,421,421',
'421,420,,,,421,,421,421,,,421,421,,421,422,421,421,421,421,421,421,421',
'421,421,,421,421,421,,421,422,422,422,422,422,422,422,422,422,422,,422',
'422,422,422,421,,,,422,,422,422,,,422,422,,422,428,422,422,422,422,422',
'422,422,422,422,,422,422,422,,422,428,428,428,428,428,428,428,428,428',
'428,,428,428,428,428,422,,,,428,,428,428,,,428,428,,428,72,428,428,428',
'428,428,428,428,428,428,,428,428,428,,428,72,72,72,72,72,72,72,72,72',
'72,,72,72,72,72,428,,,,72,,72,72,,,72,72,,72,92,72,72,72,72,72,72,72',
'72,72,,72,72,72,,72,92,92,92,92,92,92,92,92,92,92,,92,92,92,92,72,,',
',92,,92,92,,,92,92,,92,93,92,92,92,92,92,92,92,92,92,,92,92,92,,92,93',
'93,93,93,93,93,93,93,93,93,,93,93,93,93,92,,,,93,,93,93,,,93,93,,93',
'174,93,93,93,93,93,93,93,93,93,,93,93,93,,93,174,174,174,174,174,174',
'174,174,174,174,,174,174,174,174,93,,,,174,,174,174,,,174,174,,174,',
'174,174,174,174,174,174,174,174,174,,174,174,174,,174,,437,437,437,437',
',,78,78,437,437,437,,,,174,78,78,78,78,78,78,78,,436,436,436,436,,,79',
'79,436,436,436,318,,318,318,79,79,79,79,79,79,79,,,,,78,78,,78,78,78',
',78,78,78,78,78,78,78,78,78,78,78,78,78,,78,78,79,79,,79,79,79,,79,79',
'79,79,79,79,79,79,79,79,79,79,79,,79,79,157,157,,,,,,,,157,157,157,157',
'157,157,157,,263,263,263,263,,,77,77,263,263,263,,,,,77,77,77,77,77',
'77,77,,,,,157,157,,157,157,157,,157,157,157,157,157,157,157,157,157',
'157,157,157,157,,157,157,77,77,,77,77,77,,77,77,77,77,77,77,77,77,77',
'77,77,77,77,,77,77,74,74,,,,,,,,74,74,74,74,74,74,74,,435,435,435,435',
',,369,369,435,435,435,,,,,369,369,369,369,369,369,369,,,,,74,74,,74',
'74,74,,74,74,74,74,74,74,74,74,74,74,74,74,74,,74,74,369,369,,369,369',
'369,,369,369,369,369,369,369,369,369,369,369,369,369,369,,369,369,138',
'138,,,,,,,,138,138,138,138,138,138,138,,443,443,443,443,,,100,100,443',
'443,443,,,,,100,100,100,100,100,100,100,,,,,138,138,,138,138,138,,138',
'138,138,138,138,138,138,138,138,138,138,138,138,,138,138,100,100,,100',
'100,100,,100,100,100,100,100,100,100,100,100,100,100,100,100,,100,100',
'73,73,,,,,,,,73,73,73,73,73,73,73,,317,317,317,317,,,118,118,317,317',
'317,,,,,118,118,118,118,118,118,118,,,,,73,73,,73,73,73,,73,73,73,73',
'73,73,73,73,73,73,73,73,73,,73,73,118,118,,118,118,118,,118,264,264',
'264,264,119,119,,,264,264,264,,118,119,119,119,119,119,119,119,,,205',
'205,,,,,,,,205,205,205,205,205,205,205,,,,,,,,,,119,119,,119,119,119',
',119,,,,,,,,,,,205,205,119,205,205,205,,205,247,247,247,247,206,206',
',,247,247,247,,205,206,206,206,206,206,206,206,,,196,196,,,,,,,,196',
'196,196,196,196,196,196,,,,,,,,,,206,206,,206,206,206,,206,,,,,,,,,',
',196,196,206,196,196,196,,196,266,266,266,266,195,195,,,266,266,266',
',196,195,195,195,195,195,195,195,248,248,248,248,156,156,156,156,248',
'248,248,,156,156,156,248,,,248,156,,,156,,,,,195,195,,195,195,195,,195',
',179,179,179,179,179,179,179,179,179,179,,195,179,,179,248,,,,179,,179',
'179,,,179,179,,179,,,,,,,,,179,179,,179,179,179,,179,178,178,178,178',
'178,178,178,178,178,178,,,178,,178,179,,,,178,,178,178,,,178,178,,178',
',,,,,,,,178,178,,178,178,178,,178,180,180,180,180,180,180,180,180,180',
'180,,,180,,180,178,,,,180,,180,180,,,180,180,,180,,,,,,,,,180,180,,',
'180,180,,180,372,372,372,372,372,372,372,372,372,372,,,372,,372,180',
',,,372,,372,372,,,372,372,,372,,,,,,,,,372,372,,,372,372,,372,181,181',
'181,181,181,181,181,181,181,181,,,181,,181,372,,,,181,,181,181,,,181',
'181,,181,,,,,,,,,181,181,,,181,181,,181,373,373,373,373,373,373,373',
'373,373,373,,,373,,373,181,,,,373,,373,373,,,373,373,,373,,,,,,,,,373',
'373,,,373,373,,373,165,165,165,165,165,165,165,165,165,165,,,165,,165',
'373,,,,165,,165,165,,,165,165,,165,,,,,410,,,,165,165,410,410,165,165',
',165,,,,410,410,410,410,410,410,410,323,323,323,323,,165,,,323,323,323',
'203,203,,,323,,,323,,203,203,203,203,203,203,203,410,410,,410,410,410',
',410,116,116,,,,,,,,116,116,116,116,116,116,116,323,,,203,203,,203,203',
'203,,203,198,198,,,,,,,,198,198,198,198,198,198,198,116,116,,116,116',
'116,,116,121,121,,,,,,,,121,121,121,121,121,121,121,,,,198,198,,198',
'198,198,,198,115,115,,,,,,,,115,115,115,115,115,115,115,121,121,,121',
'121,121,,121,201,201,,,,,,,,201,201,201,201,201,201,201,,,,115,115,',
'115,115,115,,115,117,117,,,,,,,,117,117,117,117,117,117,117,201,201',
',201,201,201,,201,114,114,,,,,,,,114,114,114,114,114,114,114,,,,117',
'117,,117,117,117,,117,113,113,,,,,,,,113,113,113,113,113,113,113,114',
'114,,114,114,114,,114,191,191,,,,,,,,191,191,191,191,191,191,191,,,',
'113,113,,113,113,113,,113,199,199,,,,,,,,199,199,199,199,199,199,199',
'191,191,,191,191,191,,191,190,190,,,,,,,,190,190,190,190,190,190,190',
',,,199,199,,199,199,199,,199,354,354,,,,,,,,354,354,354,354,354,354',
'354,190,190,,190,190,190,354,190,189,189,,,,,,,,189,189,189,189,189',
'189,189,,,,354,354,,354,354,354,,354,112,112,,,,,,,,112,112,112,112',
'112,112,112,189,189,,189,189,189,,189,230,230,,,,,,,,230,230,230,230',
'230,230,230,,,,112,112,,112,112,112,,112,445,445,,,,,,,,445,445,445',
'445,445,445,445,230,230,,230,230,230,,230,188,188,,,,,,,,188,188,188',
'188,188,188,188,,,,445,445,,445,445,445,,445,187,187,,,,,,,,187,187',
'187,187,187,187,187,188,188,,188,188,188,,188,200,200,,,,,,,,200,200',
'200,200,200,200,200,,,,187,187,,187,187,187,,187,192,192,,,,,,,,192',
'192,192,192,192,192,192,200,200,,200,200,200,,200,193,193,,,,,,,,193',
'193,193,193,193,193,193,,,,192,192,,192,192,192,,192,109,109,,,,,,,',
'109,109,109,109,109,109,109,193,193,,193,193,193,,193,108,108,,,,,,',
',108,108,108,108,108,108,108,,,,109,109,,109,109,109,,109,197,197,,',
',,,,,197,197,197,197,197,197,197,108,108,,108,108,108,,108,202,202,',
',,,,,,202,202,202,202,202,202,202,,,,197,197,,197,197,197,,197,231,231',
',,,,,,,231,231,231,231,231,231,231,202,202,,202,202,202,,202,204,204',
',,,,,,,204,204,204,204,204,204,204,,,,231,231,,231,231,231,,231,259',
'259,,,,,,,,259,259,259,259,259,259,259,204,204,,204,204,204,,204,257',
'257,,,,,,,,257,257,257,257,257,257,257,,,,259,259,,259,259,259,,259',
'120,120,,,,,,,,120,120,120,120,120,120,120,257,257,,257,257,257,,257',
'194,194,,,,,,,,194,194,194,194,194,194,194,,,,120,120,,120,120,120,',
'120,320,320,320,320,169,169,169,169,320,320,320,,169,169,169,320,194',
'194,320,194,194,194,,194,319,319,319,319,265,265,265,265,319,319,319',
',265,265,265,319,,,319,,,,,320,28,28,28,28,28,28,28,28,28,28,28,28,',
'28,28,,,,,,,,,319,106,106,106,106,106,106,106,106,106,106,106,106,,106',
'106,111,111,,,111,111,111,111,111,111,111,111,170,170,170,170,,,,,170',
'170,170' ]
        racc_action_check = arr = ::Array.new(2980, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   419,   562,     3,   nil,   nil,    14,   103,   223,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   158,
   nil,   nil,   nil,   nil,   457,   nil,   nil,   nil,  2843,   nil,
    -8,   nil,   178,   538,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   548,   nil,   539,    46,   -35,   nil,   nil,   nil,   126,   500,
   499,   nil,   869,  1418,  1240,   nil,   nil,  1174,  1062,  1085,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   514,   nil,
   nil,   nil,   914,   959,   494,   474,   470,   458,   451,   448,
  1352,   nil,   441,   429,   386,   348,  2867,   nil,  2615,  2591,
   360,  2882,  2387,  2234,  2207,  2132,  2054,  2183,  1441,  1496,
  2795,  2105,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1329,   nil,
   nil,   -29,   341,   335,   390,   nil,   323,   319,   300,   280,
   nil,   nil,   262,   554,    88,   245,  1683,  1151,   nil,   nil,
   nil,   nil,   nil,   233,   229,  1958,   217,   214,   nil,  2871,
  2966,   133,   509,   599,  1004,   644,   464,   nil,  1733,  1688,
  1778,  1868,   nil,   nil,   nil,   nil,   nil,  2489,  2462,  2360,
  2309,  2258,  2540,  2564,  2819,  1642,  1587,  2642,  2081,  2285,
  2513,  2156,  2666,  2030,  2717,  1514,  1569,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   209,   203,   198,   143,   nil,   nil,   nil,   nil,   nil,
  2411,  2693,   nil,   nil,   nil,   nil,   nil,   139,   nil,   100,
   358,   313,   268,   nil,    99,    84,   178,  1586,  1679,     3,
   nil,   nil,   396,    95,   nil,    29,   nil,  2768,   nil,  2744,
   nil,   nil,   nil,  1189,  1513,  2895,  1659,   nil,   118,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   165,   nil,
   172,   nil,   nil,   nil,   nil,   nil,   184,   188,   200,    15,
   nil,   nil,   nil,    -6,   198,   181,   nil,  1456,  1096,  2891,
  2867,   nil,   nil,  2040,   -12,   nil,   nil,   nil,   251,   nil,
   211,   245,   nil,   255,   258,   nil,   237,   -16,   263,   nil,
   278,   nil,   120,   nil,   nil,   274,   nil,   nil,   nil,   nil,
   nil,   nil,   267,   298,  2336,   nil,   nil,   nil,   nil,   nil,
   271,   nil,   nil,   294,   nil,   nil,   307,   -39,   nil,  1263,
   nil,   nil,  1823,  1913,   nil,   nil,   342,   nil,   315,   335,
   nil,    23,   338,   nil,   342,   354,   344,   nil,   380,   nil,
   nil,    25,   nil,   387,   388,   394,   nil,   nil,   nil,   nil,
   397,   409,   384,   nil,   nil,   406,    -7,   nil,   nil,   nil,
  2003,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -13,
   689,   734,   779,   nil,   nil,    88,   nil,   nil,   824,   nil,
   486,   nil,   492,   493,   -32,  1278,  1100,  1077,   503,   515,
   nil,   nil,   509,  1367,   -27,  2438,   nil,   512,   nil,   nil,
   nil,   541,   nil,    -6,   nil,   nil,   nil,   545,   nil,   538,
   550,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   564,   nil,
   566,   nil ]

racc_action_default = [
  -255,  -255,  -255,    -2,    -3,    -4,    -7,  -255,   -18,   -19,
   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,
   -32,   -33,   -34,   -35,   -36,   -41,   -42,   -43,   -46,   -45,
   -64,   -58,   -64,  -247,   -74,   -75,   -76,   -77,   -85,   -86,
   -87,   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,
   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -251,
  -255,  -112,  -255,  -255,  -255,  -123,  -249,  -249,  -254,  -247,
  -247,  -249,  -255,   -78,   -78,  -165,  -166,   -78,   -78,   -78,
  -170,  -172,  -251,  -176,  -177,  -182,  -239,  -240,  -255,    -1,
  -241,  -242,    -5,    -6,  -247,  -247,  -247,  -247,  -247,  -247,
   -78,   -17,  -247,  -247,  -247,  -247,   -44,  -197,  -255,  -255,
  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -255,
  -255,  -255,   -51,   -52,   -53,   -54,   -55,   -64,   -57,   -61,
   -65,   -66,   -68,   -80,   -82,   -83,   -84,   -59,  -254,   -62,
  -251,  -255,  -247,  -247,  -255,  -251,  -247,  -247,  -247,  -255,
  -251,  -254,  -247,  -255,  -255,  -247,  -255,   -79,  -163,  -164,
  -167,  -168,  -169,  -247,  -247,  -255,  -247,  -247,   472,    -8,
    -9,  -255,  -255,  -255,  -255,  -255,  -255,   -16,  -255,  -255,
  -255,  -255,  -198,  -199,  -237,  -238,  -200,  -255,  -255,  -255,
  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -255,
  -255,  -255,  -255,  -255,  -255,  -255,  -255,  -205,  -208,  -211,
  -214,  -217,  -220,  -223,  -232,  -226,  -229,  -235,  -236,   -56,
   -81,   -70,   -70,  -255,  -247,  -248,  -106,  -107,  -108,  -109,
  -255,  -255,  -115,  -117,  -251,  -251,  -251,  -247,  -254,  -126,
  -188,  -255,  -255,  -142,  -247,  -255,  -255,  -145,  -255,  -255,
  -158,  -254,  -255,  -175,   -46,   -64,  -252,  -254,  -179,  -254,
  -184,   -10,   -11,   -12,   -13,   -14,   -15,   -30,   -36,   -31,
   -37,   -39,   -38,   -40,  -201,  -202,  -206,  -209,  -212,  -215,
  -218,  -221,  -224,  -233,  -227,  -230,  -203,  -204,  -207,  -210,
  -213,  -216,  -219,  -222,  -225,  -234,  -228,  -231,  -247,   -72,
  -247,  -253,   -63,   -49,   -50,  -110,  -247,  -247,  -247,  -247,
  -120,  -245,  -246,  -255,  -255,  -130,   -47,  -193,  -189,  -255,
  -255,  -254,  -144,  -255,  -255,  -150,  -151,  -152,  -247,  -156,
  -255,  -255,  -254,  -247,  -247,  -174,  -255,  -247,  -255,  -185,
  -247,  -254,  -247,  -254,   -60,  -255,  -254,  -254,  -119,  -251,
  -122,  -124,  -132,  -247,  -128,  -251,  -251,  -251,  -134,  -136,
  -137,  -139,  -140,  -255,  -251,  -251,  -247,  -255,  -254,   -78,
  -252,  -252,  -255,  -255,  -178,  -180,  -247,  -183,  -255,  -255,
   -71,  -255,  -255,  -113,  -255,  -255,  -255,  -125,  -247,  -131,
   -48,  -255,  -251,  -247,  -247,  -247,  -250,  -138,  -250,  -143,
  -247,  -247,  -130,  -251,  -157,  -255,  -255,  -171,  -173,  -181,
  -255,   -67,   -73,   -69,  -116,  -118,  -121,  -133,  -251,  -247,
  -190,  -191,  -192,  -251,  -251,  -147,  -146,  -254,  -255,  -159,
  -247,  -252,  -247,  -247,  -255,  -194,  -195,  -196,  -247,  -247,
  -251,  -149,  -255,  -251,  -130,  -255,  -187,  -126,  -129,  -254,
  -254,  -247,  -153,  -255,  -160,  -161,  -162,  -247,  -127,  -255,
  -255,  -148,  -154,  -186,  -135,  -141,  -250,  -251,  -247,  -254,
  -255,  -155 ]

racc_goto_table = [
    23,   238,   368,   151,   107,   144,   145,    23,   271,   273,
   315,   352,    48,   137,   396,   358,   362,   158,   159,    48,
   255,   160,   161,   162,   254,   423,   220,   424,   305,   306,
   335,   232,   253,   147,   148,   270,   272,   224,   155,   254,
   254,    46,   344,   250,   177,   268,   268,   138,    46,   267,
   269,   298,   300,   233,   307,   337,   220,   340,   308,   309,
   146,   127,   354,   387,   391,   106,   342,   221,   222,   226,
   398,     5,    23,   324,   366,   328,   466,    89,   330,   454,
     2,   163,   182,   227,    48,   164,   256,   257,   166,   259,
   167,   339,    23,    23,   318,   467,     1,   nil,   427,   134,
   nil,   nil,   nil,   nil,    48,    48,   327,   nil,   219,   nil,
   nil,   nil,   nil,    46,   nil,   nil,   456,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   101,   nil,   nil,   nil,   nil,   nil,
   nil,    47,   nil,    46,    46,   nil,   nil,   nil,    47,   nil,
   455,   nil,   134,   134,   407,   408,   134,   134,   134,   462,
   nil,   nil,   390,    23,    23,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   346,   347,   nil,    48,    48,   nil,   nil,   134,
   nil,    23,    23,    23,    23,    23,    23,    48,    23,    23,
   nil,   364,   365,    48,    48,    48,    48,    48,    48,   156,
    48,    48,    48,    48,    46,    46,   134,   nil,   nil,   nil,
   271,   273,   nil,    47,   nil,   445,    46,   134,   432,   169,
   170,   nil,    46,    46,    46,    46,    46,    46,   458,    46,
    46,    46,    46,    47,    47,   nil,   134,   255,   255,   nil,
   nil,   254,   254,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,    23,    23,   457,   nil,   nil,    23,   nil,   nil,   418,
   141,   nil,    48,    48,    48,   350,   nil,   nil,    48,   nil,
   nil,   nil,   nil,   nil,   430,   nil,   nil,   nil,   nil,   nil,
   247,   248,   nil,   165,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    46,    46,    46,    47,    47,   nil,    46,   261,   262,
   263,   264,   265,   266,   nil,   nil,    47,   149,   nil,   303,
   303,   nil,    47,    47,    47,    47,    47,    47,   nil,    47,
    47,    47,    47,   406,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   412,   nil,   nil,   303,   nil,   303,   nil,
   nil,   225,   139,   nil,   nil,   nil,   237,   nil,   nil,   nil,
   nil,   244,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   251,   252,   nil,   317,   319,   320,
   441,   nil,   nil,   323,   nil,   nil,   nil,   223,   153,   154,
   nil,    47,    47,    47,   nil,   nil,   448,    47,   nil,   nil,
   245,   nil,   nil,   nil,    48,    48,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   171,   172,   173,   174,   175,   176,   nil,
   nil,   178,   179,   180,   181,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    46,    46,   nil,   nil,   nil,   nil,   nil,
    23,    23,    23,   303,   nil,   310,   311,   312,    23,   nil,
   nil,   nil,    48,    48,    48,   321,   nil,   nil,   134,   nil,
    48,   230,   231,   nil,   nil,   nil,   241,   242,   nil,   nil,
   nil,   246,   nil,   nil,   249,   nil,   nil,   nil,   nil,   nil,
   nil,    46,    46,    46,   nil,   258,   260,   314,   nil,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   303,
   331,   nil,   nil,   nil,   nil,   nil,   336,   nil,   338,   341,
   nil,   343,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   303,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   302,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   313,   435,   436,   437,
   386,   nil,   nil,   nil,   389,   443,   393,   394,   395,   nil,
   363,    47,    47,    47,   nil,   400,   401,   402,   nil,    47,
   nil,   371,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   379,   nil,   382,   nil,   nil,   384,   385,   nil,   nil,   417,
   nil,   nil,   nil,   419,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   425,   426,   nil,   428,   nil,   nil,   405,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   345,   nil,   nil,   349,   433,
   nil,   nil,   nil,   nil,   438,   439,   nil,   nil,   nil,   nil,
   nil,   444,   nil,   nil,   447,   nil,   nil,   367,   nil,   449,
   450,   451,   372,   373,   453,   nil,   375,   nil,   nil,   378,
   nil,   381,   461,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   442,   nil,   468,   469,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   409,   nil,   nil,   459,   460,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   420,   421,   422,   183,   186,   nil,   470,   207,
   208,   209,   210,   211,   212,   213,   215,   217,   218,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   434,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   446,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   463,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   284,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   296 ]

racc_goto_check = [
    23,    73,    95,    90,    54,    53,    53,    23,    26,    26,
    79,    80,    36,    39,    87,    85,    85,     7,     7,    36,
    37,     7,     7,     7,    28,    86,    46,    86,    32,    32,
    98,    72,    24,    84,    84,    25,    25,    46,    84,    28,
    28,    34,    45,    72,     7,    24,    24,    43,    34,    20,
    20,    48,    48,    74,    75,    32,    46,    32,    76,    77,
    78,    38,    31,    81,    82,    29,    52,    50,    51,    68,
    88,     4,    23,    91,    92,    93,    94,     3,    96,    97,
     2,    99,    54,    53,    36,   100,   101,   102,   103,   104,
   105,   106,    23,    23,   107,    86,     1,   nil,    80,    33,
   nil,   nil,   nil,   nil,    36,    36,    83,   nil,    39,   nil,
   nil,   nil,   nil,    34,   nil,   nil,    95,     5,   nil,   nil,
   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,
   nil,    35,   nil,    34,    34,   nil,   nil,   nil,    35,   nil,
    80,   nil,    33,    33,    98,    98,    33,    33,    33,    85,
   nil,   nil,    32,    23,    23,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    73,    73,   nil,    36,    36,   nil,   nil,    33,
   nil,    23,    23,    23,    23,    23,    23,    36,    23,    23,
   nil,    83,    83,    36,    36,    36,    36,    36,    36,     5,
    36,    36,    36,    36,    34,    34,    33,   nil,   nil,   nil,
    26,    26,   nil,    35,   nil,    98,    34,    33,    32,     5,
     5,   nil,    34,    34,    34,    34,    34,    34,    79,    34,
    34,    34,    34,    35,    35,   nil,    33,    37,    37,   nil,
   nil,    28,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,    23,    23,    32,   nil,   nil,    23,   nil,   nil,    83,
    67,   nil,    36,    36,    36,    53,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,    83,   nil,   nil,   nil,   nil,   nil,
     5,     5,   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    34,    34,    34,    35,    35,   nil,    34,     5,     5,
     5,     5,     5,     5,   nil,   nil,    35,    44,   nil,    33,
    33,   nil,    35,    35,    35,    35,    35,    35,   nil,    35,
    35,    35,    35,     7,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    53,   nil,   nil,    33,   nil,    33,   nil,
   nil,    67,     6,   nil,   nil,   nil,    67,   nil,   nil,   nil,
   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    49,    49,   nil,     5,     5,     5,
    90,   nil,   nil,     5,   nil,   nil,   nil,    44,     6,     6,
   nil,    35,    35,    35,   nil,   nil,    53,    35,   nil,   nil,
    44,   nil,   nil,   nil,    36,    36,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     6,     6,     6,     6,     6,     6,   nil,
   nil,     6,     6,     6,     6,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    34,    34,   nil,   nil,   nil,   nil,   nil,
    23,    23,    23,    33,   nil,    67,    67,    67,    23,   nil,
   nil,   nil,    36,    36,    36,    49,   nil,   nil,    33,   nil,
    36,     6,     6,   nil,   nil,   nil,     6,     6,   nil,   nil,
   nil,     6,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,
   nil,    34,    34,    34,   nil,     6,     6,    44,   nil,    34,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33,
    44,   nil,   nil,   nil,   nil,   nil,    44,   nil,    44,    49,
   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    35,    35,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     6,     5,     5,     5,
    67,   nil,   nil,   nil,    49,     5,    67,    67,    67,   nil,
    44,    35,    35,    35,   nil,    67,    67,    49,   nil,    35,
   nil,    44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    44,   nil,    44,   nil,   nil,    44,    44,   nil,   nil,    49,
   nil,   nil,   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    49,    49,   nil,    67,   nil,   nil,    44,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,     6,    67,
   nil,   nil,   nil,   nil,    67,    67,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,    49,   nil,   nil,     6,   nil,    49,
    49,    67,     6,     6,    67,   nil,     6,   nil,   nil,     6,
   nil,     6,    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,    67,    49,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,    44,    44,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     6,     6,     6,   108,   108,   nil,    44,   108,
   108,   108,   108,   108,   108,   108,   108,   108,   108,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   108,   108,   108,   108,   108,   108,
   108,   108,   108,   108,   108,   108,   108,   108,   108,   108,
   108,   108,   108,   108 ]

racc_goto_pointer = [
   nil,    96,    80,    75,    71,   117,   299,   -56,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -129,   nil,   nil,     0,  -133,  -145,  -172,   nil,  -141,    37,
   nil,  -254,  -202,    69,    41,   131,    12,  -145,    31,   -19,
   nil,   nil,   nil,    14,   229,  -259,  -101,   nil,  -170,   191,
   -64,   -64,  -233,   -58,   -24,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   191,   -72,   nil,
   nil,   nil,  -113,  -145,   -91,  -178,  -175,  -175,    -5,  -229,
  -304,  -289,  -290,  -142,   -33,  -304,  -371,  -344,  -292,   nil,
   -65,  -174,  -253,  -174,  -386,  -328,  -172,  -365,  -226,     1,
     4,   -79,   -79,     4,   -78,     5,  -168,  -146,   587,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   240,   nil,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,   125,    24,    27,    25,    26,    28,   nil,
    29,   nil,   nil,   184,   123,   124,   126,    30,   157,   128,
    31,    32,    33,   nil,   nil,   nil,   133,   130,   nil,   239,
   nil,   nil,   nil,    34,   136,    38,    39,    40,    41,    42,
    43,    44,    45,    55,    56,    57,    58,   nil,   nil,    60,
    61,    62,   326,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    68,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 92, :_reduce_1,
  1, 92, :_reduce_2,
  1, 92, :_reduce_3,
  1, 93, :_reduce_none,
  2, 93, :_reduce_5,
  2, 93, :_reduce_6,
  1, 95, :_reduce_7,
  3, 95, :_reduce_8,
  3, 95, :_reduce_9,
  4, 96, :_reduce_10,
  4, 96, :_reduce_11,
  4, 96, :_reduce_12,
  4, 96, :_reduce_13,
  4, 96, :_reduce_14,
  4, 96, :_reduce_15,
  3, 96, :_reduce_16,
  2, 96, :_reduce_17,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 99, :_reduce_none,
  4, 110, :_reduce_30,
  4, 110, :_reduce_31,
  1, 110, :_reduce_none,
  1, 111, :_reduce_33,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 113, :_reduce_none,
  4, 113, :_reduce_37,
  4, 113, :_reduce_38,
  4, 115, :_reduce_39,
  4, 115, :_reduce_40,
  1, 115, :_reduce_41,
  1, 115, :_reduce_42,
  1, 112, :_reduce_none,
  2, 112, :_reduce_44,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  0, 122, :_reduce_47,
  2, 122, :_reduce_48,
  1, 123, :_reduce_none,
  1, 123, :_reduce_50,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 116, :_reduce_56,
  2, 121, :_reduce_57,
  1, 121, :_reduce_none,
  2, 131, :_reduce_59,
  5, 132, :_reduce_60,
  2, 133, :_reduce_61,
  1, 134, :_reduce_62,
  3, 134, :_reduce_63,
  0, 130, :_reduce_64,
  1, 130, :_reduce_none,
  0, 141, :_reduce_66,
  6, 138, :_reduce_67,
  0, 142, :_reduce_68,
  6, 138, :_reduce_69,
  0, 139, :_reduce_70,
  3, 139, :_reduce_71,
  0, 143, :_reduce_72,
  3, 143, :_reduce_73,
  1, 128, :_reduce_74,
  1, 128, :_reduce_75,
  1, 128, :_reduce_76,
  1, 128, :_reduce_77,
  0, 98, :_reduce_78,
  1, 98, :_reduce_none,
  1, 129, :_reduce_80,
  2, 129, :_reduce_81,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 146, :_reduce_95,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  3, 156, :_reduce_106,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  4, 107, :_reduce_110,
  1, 160, :_reduce_none,
  1, 118, :_reduce_112,
  6, 161, :_reduce_113,
  1, 162, :_reduce_none,
  0, 166, :_reduce_115,
  7, 108, :_reduce_116,
  0, 167, :_reduce_117,
  7, 108, :_reduce_118,
  3, 165, :_reduce_119,
  1, 168, :_reduce_120,
  4, 168, :_reduce_121,
  5, 109, :_reduce_122,
  0, 169, :_reduce_123,
  5, 151, :_reduce_124,
  4, 164, :_reduce_125,
  0, 170, :_reduce_126,
  7, 170, :_reduce_127,
  0, 173, :_reduce_128,
  4, 173, :_reduce_129,
  0, 171, :_reduce_130,
  2, 171, :_reduce_131,
  0, 172, :_reduce_132,
  2, 172, :_reduce_133,
  0, 178, :_reduce_134,
  11, 149, :_reduce_135,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  2, 176, :_reduce_none,
  1, 176, :_reduce_none,
  0, 179, :_reduce_140,
  11, 150, :_reduce_141,
  3, 147, :_reduce_142,
  6, 147, :_reduce_143,
  4, 147, :_reduce_144,
  0, 182, :_reduce_145,
  7, 180, :_reduce_146,
  6, 181, :_reduce_147,
  9, 181, :_reduce_148,
  7, 181, :_reduce_149,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  0, 183, :_reduce_152,
  9, 148, :_reduce_153,
  0, 185, :_reduce_154,
  16, 153, :_reduce_155,
  1, 184, :_reduce_156,
  3, 184, :_reduce_157,
  0, 187, :_reduce_158,
  7, 152, :_reduce_159,
  5, 186, :_reduce_160,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  2, 100, :_reduce_163,
  2, 101, :_reduce_164,
  1, 102, :_reduce_165,
  1, 103, :_reduce_166,
  2, 104, :_reduce_167,
  2, 105, :_reduce_168,
  2, 106, :_reduce_169,
  0, 190, :_reduce_170,
  6, 125, :_reduce_171,
  0, 191, :_reduce_172,
  6, 126, :_reduce_173,
  4, 114, :_reduce_174,
  1, 192, :_reduce_175,
  1, 157, :_reduce_176,
  0, 194, :_reduce_177,
  5, 154, :_reduce_178,
  1, 193, :_reduce_179,
  3, 193, :_reduce_180,
  4, 193, :_reduce_181,
  0, 196, :_reduce_182,
  5, 155, :_reduce_183,
  1, 195, :_reduce_184,
  2, 195, :_reduce_185,
  7, 197, :_reduce_186,
  5, 197, :_reduce_187,
  1, 140, :_reduce_188,
  2, 140, :_reduce_189,
  5, 140, :_reduce_190,
  5, 140, :_reduce_191,
  5, 140, :_reduce_192,
  1, 198, :_reduce_193,
  5, 198, :_reduce_194,
  5, 198, :_reduce_195,
  5, 198, :_reduce_196,
  1, 120, :_reduce_197,
  2, 120, :_reduce_198,
  2, 145, :_reduce_199,
  2, 145, :_reduce_200,
  3, 145, :_reduce_201,
  3, 145, :_reduce_202,
  3, 145, :_reduce_none,
  3, 145, :_reduce_none,
  2, 145, :_reduce_205,
  3, 145, :_reduce_206,
  3, 145, :_reduce_none,
  2, 145, :_reduce_none,
  3, 145, :_reduce_none,
  3, 145, :_reduce_none,
  2, 145, :_reduce_none,
  3, 145, :_reduce_none,
  3, 145, :_reduce_none,
  2, 145, :_reduce_none,
  3, 145, :_reduce_none,
  3, 145, :_reduce_none,
  2, 145, :_reduce_none,
  3, 145, :_reduce_none,
  3, 145, :_reduce_none,
  2, 145, :_reduce_none,
  3, 145, :_reduce_none,
  3, 145, :_reduce_none,
  2, 145, :_reduce_none,
  3, 145, :_reduce_none,
  3, 145, :_reduce_none,
  2, 145, :_reduce_none,
  3, 145, :_reduce_none,
  3, 145, :_reduce_none,
  2, 145, :_reduce_none,
  3, 145, :_reduce_none,
  3, 145, :_reduce_none,
  2, 145, :_reduce_none,
  3, 145, :_reduce_none,
  3, 145, :_reduce_none,
  2, 145, :_reduce_235,
  2, 145, :_reduce_236,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 200, :_reduce_none,
  2, 200, :_reduce_none,
  2, 163, :_reduce_none,
  2, 163, :_reduce_none,
  0, 97, :_reduce_none,
  2, 97, :_reduce_none,
  0, 175, :_reduce_249,
  0, 177, :_reduce_250,
  0, 158, :_reduce_251,
  0, 189, :_reduce_252,
  0, 136, :_reduce_253,
  0, 135, :_reduce_254 ]

racc_reduce_n = 255

racc_shift_n = 472

racc_token_table = {
  false => 0,
  :error => 1,
  :LOWER => 2,
  :MOD_IF => 3,
  :MOD_UNLESS => 4,
  :MOD_WHILE => 5,
  :MOD_UNTIL => 6,
  "=" => 7,
  :DO => 8,
  :LBRACE_I => 9,
  :LBLACK_I => 10,
  :MOD_RESCUE => 11,
  :AND_AND => 12,
  :OR_OR => 13,
  :BANG => 14,
  "." => 15,
  :COLON2 => 16,
  :HIGHER => 17,
  :NL => 18,
  :EOF => 19,
  "&" => 20,
  ";" => 21,
  "|" => 22,
  :BAR_AND => 23,
  :WILDCARD => 24,
  :WORD => 25,
  ")" => 26,
  :LPARLEN_ARG => 27,
  :END => 28,
  "}" => 29,
  :PATH => 30,
  :TEST => 31,
  :SPECIAL => 32,
  :STRING => 33,
  :REGEXP => 34,
  :NUMBER => 35,
  :INTEGER => 36,
  :VARIABLE => 37,
  :PSEUDOVARIABLE => 38,
  :SYMBEG => 39,
  "]" => 40,
  :DEF => 41,
  :ID => 42,
  :ALIAS => 43,
  :BEGIN => 44,
  :RESCUE => 45,
  :ASSOC => 46,
  :ELSE => 47,
  :ENSURE => 48,
  :WHILE => 49,
  :DO_COND => 50,
  :UNTIL => 51,
  :IF => 52,
  :ELSIF => 53,
  :THEN => 54,
  :UNLESS => 55,
  :FOR => 56,
  :IN => 57,
  :CASE => 58,
  :WHEN => 59,
  :BREAK => 60,
  :NEXT => 61,
  :REDO => 62,
  :Retry => 63,
  :RAISE => 64,
  :RETURN => 65,
  :YIELD => 66,
  "(" => 67,
  :XSTRING_BEG => 68,
  :XSTRING_END => 69,
  "$" => 70,
  :RUBYEXP => 71,
  :LBLACK_A => 72,
  "," => 73,
  :LBRACE_H => 74,
  ">" => 75,
  "<" => 76,
  :FID => 77,
  :REDIR_WORD => 78,
  :GREATER_GREATER => 79,
  :GREATER_BAR => 80,
  :LESS_GREATER => 81,
  :LESS_LESS => 82,
  :LESS_LESS_MINUS => 83,
  :LESS_LESS_LESS => 84,
  :LESS_AND => 85,
  :GREATER_AND => 86,
  "-" => 87,
  :AND_GREATER => 88,
  :AND_GREATER_GREATER => 89,
  :ID2 => 90 }

racc_nt_base = 91

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LOWER",
  "MOD_IF",
  "MOD_UNLESS",
  "MOD_WHILE",
  "MOD_UNTIL",
  "\"=\"",
  "DO",
  "LBRACE_I",
  "LBLACK_I",
  "MOD_RESCUE",
  "AND_AND",
  "OR_OR",
  "BANG",
  "\".\"",
  "COLON2",
  "HIGHER",
  "NL",
  "EOF",
  "\"&\"",
  "\";\"",
  "\"|\"",
  "BAR_AND",
  "WILDCARD",
  "WORD",
  "\")\"",
  "LPARLEN_ARG",
  "END",
  "\"}\"",
  "PATH",
  "TEST",
  "SPECIAL",
  "STRING",
  "REGEXP",
  "NUMBER",
  "INTEGER",
  "VARIABLE",
  "PSEUDOVARIABLE",
  "SYMBEG",
  "\"]\"",
  "DEF",
  "ID",
  "ALIAS",
  "BEGIN",
  "RESCUE",
  "ASSOC",
  "ELSE",
  "ENSURE",
  "WHILE",
  "DO_COND",
  "UNTIL",
  "IF",
  "ELSIF",
  "THEN",
  "UNLESS",
  "FOR",
  "IN",
  "CASE",
  "WHEN",
  "BREAK",
  "NEXT",
  "REDO",
  "Retry",
  "RAISE",
  "RETURN",
  "YIELD",
  "\"(\"",
  "XSTRING_BEG",
  "XSTRING_END",
  "\"$\"",
  "RUBYEXP",
  "LBLACK_A",
  "\",\"",
  "LBRACE_H",
  "\">\"",
  "\"<\"",
  "FID",
  "REDIR_WORD",
  "GREATER_GREATER",
  "GREATER_BAR",
  "LESS_GREATER",
  "LESS_LESS",
  "LESS_LESS_MINUS",
  "LESS_LESS_LESS",
  "LESS_AND",
  "GREATER_AND",
  "\"-\"",
  "AND_GREATER",
  "AND_GREATER_GREATER",
  "ID2",
  "$start",
  "inputunit",
  "simple_list",
  "simple_list_terminator",
  "simple_list1",
  "logical_command",
  "opt_nl",
  "simple_command_element_list",
  "pipeline_command",
  "break_command",
  "next_command",
  "redo_command",
  "retry_command",
  "raise_command",
  "return_command",
  "yield_command",
  "assgin_command",
  "def_command",
  "alias_command",
  "pipeline",
  "pipeline_element",
  "command",
  "strict_pipeline",
  "trivial_command",
  "strict_pipeline1",
  "simple_command",
  "strict_command",
  "index_ref_command",
  "shell_command",
  "redirection_list",
  "simple_strict_command",
  "command_element_list",
  "command_element",
  "command_element_base",
  "group_command",
  "xstring_command",
  "literal",
  "simple_command_header",
  "simple_command_element_list1",
  "opt_do_block",
  "simple_command_lparen",
  "simple_command_lparen_header",
  "simple_command_lparen_header0",
  "simple_command_element_list_p",
  "indent_pop",
  "lex_end",
  "simple_command_element",
  "do_block",
  "opt_block_arg",
  "compound_list",
  "@1",
  "@2",
  "block_arg",
  "id",
  "redirection",
  "literal_command",
  "if_command",
  "unless_command",
  "while_command",
  "until_command",
  "begin_command",
  "case_command",
  "for_command",
  "array",
  "hash",
  "symbol",
  "ruby_exp",
  "lex_beg",
  "sym",
  "assginable",
  "index_ref",
  "referenceable",
  "opt_terms",
  "body_list",
  "func_arg_list",
  "@3",
  "@4",
  "func_arg_list0",
  "@5",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "exc_var",
  "then",
  "cond_push",
  "do",
  "cond_pop",
  "@6",
  "@7",
  "if_head",
  "elsif_clause",
  "@8",
  "@9",
  "for_arg",
  "@10",
  "case_body",
  "@11",
  "cases",
  "lex_arg",
  "@12",
  "@13",
  "trivial_command0",
  "array_element_list",
  "@14",
  "hash_element_list",
  "@15",
  "hash_assoc",
  "compound_list1",
  "redirection_element",
  "opt_nl_arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_1(val, _values, result)
    		@lex.continue = false
		_values.push Node::InputUnit(val[0], val[1])
	        yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_2(val, _values, result)
    		@lex.continue = false
		_values.push Node::NOP
  		yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_3(val, _values, result)
                    _values.push Node::EOF
		yyaccept
	    
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_5(val, _values, result)
    		result.last_command_to_async
#		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_6(val, _values, result)
    #		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_7(val, _values, result)
    		result = Node::Sequence(val[0])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_8(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_9(val, _values, result)
    		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_10(val, _values, result)
    		result = Node::LogicalCommandAA(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_11(val, _values, result)
    		result = Node::LogicalCommandOO(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_12(val, _values, result)
    		result = Node::ModIfCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_13(val, _values, result)
    		result = Node::ModUnlessCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_14(val, _values, result)
    		result = Node::ModWhileCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_15(val, _values, result)
    		result = Node::ModUntilCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_16(val, _values, result)
    		result = Node::ModRescueCommand(val[0], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_17(val, _values, result)
    		result = Node::BangCommand(val[1])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

module_eval(<<'.,.,', 'parser.y', 122)
  def _reduce_30(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 132)
  def _reduce_31(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR_AND, val[3])
	    
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.y', 145)
  def _reduce_33(val, _values, result)
    		result = Node::PipelineCommand(val[0])
            
    result
  end
.,.,

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'parser.y', 153)
  def _reduce_37(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_38(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_39(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 174)
  def _reduce_40(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_41(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 183)
  def _reduce_42(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_44(val, _values, result)
    	        result = Node::Redirector(val[0], val[1])
	  
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.y', 199)
  def _reduce_47(val, _values, result)
        		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 203)
  def _reduce_48(val, _values, result)
    		result.push val[1]
	    
    result
  end
.,.,

# reduce 49 omitted

module_eval(<<'.,.,', 'parser.y', 210)
  def _reduce_50(val, _values, result)
    	        yyerror val[0], "syntax error: wildcasd #{val[0].inspect} can't use this place."
	    
    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

module_eval(<<'.,.,', 'parser.y', 221)
  def _reduce_56(val, _values, result)
    #	       result = Node::SimpleCommand(val[0], val[1], val[2])
	       result = val[0]
	       result.set_args val[1]
	       result.block = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 230)
  def _reduce_57(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0], Node::CommandElementList.new, val[1])
	       result = val[0]
	       result.set_args Node::CommandElementList.new
	       result.block = val[1]

	    
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.y', 248)
  def _reduce_59(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0][0], val[0][1], val[1])
	       result = val[0]
	       result.block = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 257)
  def _reduce_60(val, _values, result)
    #	       result = val[0]
	       result = val[0][0]
	       val[1].lparen = val[0][1]
	       result.set_args val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 266)
  def _reduce_61(val, _values, result)
    	       @lex.indent_push(:LPAREN_ARG);
#      	       result = val[0]
      	       result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 273)
  def _reduce_62(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 278)
  def _reduce_63(val, _values, result)
    		result = val[0]
  		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 290)
  def _reduce_64(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.y', 294)
  def _reduce_66(val, _values, result)
    @lex.indent_push(:DO)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 296)
  def _reduce_67(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_68(val, _values, result)
    @lex.indent_push(:LBRACE_I)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 304)
  def _reduce_69(val, _values, result)
    	      if val[2]
		result = Node::DoBlock(val[3], val[2])
	      else
		result = Node::DoBlock(val[3])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 313)
  def _reduce_70(val, _values, result)
    	      result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 317)
  def _reduce_71(val, _values, result)
    	      result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 322)
  def _reduce_72(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_DO_BEG
	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 327)
  def _reduce_73(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 333)
  def _reduce_74(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 337)
  def _reduce_75(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 341)
  def _reduce_76(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 345)
  def _reduce_77(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 350)
  def _reduce_78(val, _values, result)
    	       result = Node::CommandElementList.new
	    
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.y', 356)
  def _reduce_80(val, _values, result)
    	       result = Node::CommandElementList.new(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 360)
  def _reduce_81(val, _values, result)
    	       result = val[0]
      	       result.push val[1]
	    
    result
  end
.,.,

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

module_eval(<<'.,.,', 'parser.y', 387)
  def _reduce_95(val, _values, result)
    	      result = Node::LiteralCommand(val[0])  
    	    
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

module_eval(<<'.,.,', 'parser.y', 403)
  def _reduce_106(val, _values, result)
    	      result = Node::Symbol(val[2])
	    
    result
  end
.,.,

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.y', 412)
  def _reduce_110(val, _values, result)
                   case val[0].commands.last
	       when Node::SimpleCommand
		  if val[0].commands.last.args.size > 0
		    yyerror val[0], "syntax error not assginable #{val[0].inspect}."
		  end
	       end
	       result = Node::AssginCommand(val[0], val[3])
	    
    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.y', 431)
  def _reduce_112(val, _values, result)
    		result = Node::IndexRefCommand(*val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 436)
  def _reduce_113(val, _values, result)
    		result = [val[0], val[3]]
	    
    result
  end
.,.,

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.y', 455)
  def _reduce_115(val, _values, result)
    @lex.indent_push(:BEGIN); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 457)
  def _reduce_116(val, _values, result)
    		body = Node::BeginCommand(*val[4])
		result = Node::DefCommand(val[1], nil, body)
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 460)
  def _reduce_117(val, _values, result)
    @lex.indent_push(:BEGIN); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 462)
  def _reduce_118(val, _values, result)
    		arg = val[2]
		body = Node::BeginCommand(*val[4])
		result = Node::DefCommand(val[1], arg, body)
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 469)
  def _reduce_119(val, _values, result)
    	      result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 474)
  def _reduce_120(val, _values, result)
    	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 478)
  def _reduce_121(val, _values, result)
    	      result = val[0]
	      result.push val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 484)
  def _reduce_122(val, _values, result)
         		result = Node::AliasCommand(val[1], val[4])
   	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 495)
  def _reduce_123(val, _values, result)
    @lex.indent_push(:BEGIN); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 497)
  def _reduce_124(val, _values, result)
    		result = Node::BeginCommand(*val[2])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 503)
  def _reduce_125(val, _values, result)
    		result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 508)
  def _reduce_126(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 512)
  def _reduce_127(val, _values, result)
    		result = Node::RescueCommand(val[1], val[2], val[5])
		if val[6]
		   result, t = val[6], result
		   result = [result] unless result.kind_of?(Array)
		   result.unshift t
		else
		   result = Node::RescueCommand(val[1], val[2], val[5])
		end		  
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 523)
  def _reduce_128(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 527)
  def _reduce_129(val, _values, result)
    		result = val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 531)
  def _reduce_130(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 536)
  def _reduce_131(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 540)
  def _reduce_132(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 544)
  def _reduce_133(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 547)
  def _reduce_134(val, _values, result)
    @lex.indent_push(:WHILE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 549)
  def _reduce_135(val, _values, result)
    	       result = Node::WhileCommand(val[3], val[8])
	    
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

module_eval(<<'.,.,', 'parser.y', 557)
  def _reduce_140(val, _values, result)
    @lex.indent_push(:UNTIL)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 559)
  def _reduce_141(val, _values, result)
    	       result = Node::UntilCommand(val[3], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 564)
  def _reduce_142(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 568)
  def _reduce_143(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 572)
  def _reduce_144(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 575)
  def _reduce_145(val, _values, result)
    @lex.indent_push(:IF)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 577)
  def _reduce_146(val, _values, result)
    		result = [val[2], val[6]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 581)
  def _reduce_147(val, _values, result)
    		result = Node::IfCommand(val[2], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 585)
  def _reduce_148(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[8])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 589)
  def _reduce_149(val, _values, result)
    		result = Node::IfCommand(val[2], val[5], val[6])
	    
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'parser.y', 596)
  def _reduce_152(val, _values, result)
    @lex.indent_push(:UNLESS)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 598)
  def _reduce_153(val, _values, result)
    		result = Node::IfCommand(val[2], val[6], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 603)
  def _reduce_154(val, _values, result)
    @lex.indent_push(:FOR)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 605)
  def _reduce_155(val, _values, result)
    		result = Node::ForCommand(val[3], val[7], val[13])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 610)
  def _reduce_156(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_BEG
	       result = [val[0]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 615)
  def _reduce_157(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 620)
  def _reduce_158(val, _values, result)
    @lex.indent_push(:CASE)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 622)
  def _reduce_159(val, _values, result)
    		result = Node::CaseCommand(val[1], val[4])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 629)
  def _reduce_160(val, _values, result)
    		case val[4]
		when Array
		  result = val[4]
		  result.unshift Node::WhenCommand(val[1], val[3])
		when nil
		  result = [Node::WhenCommand(val[1], val[3])]
		else
		  result = [Node::WhenCommand(val[1], val[3]), val[4]]
		end
	    
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'parser.y', 665)
  def _reduce_163(val, _values, result)
    		result = Node::BreakCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 670)
  def _reduce_164(val, _values, result)
    		result = Node::NextCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 675)
  def _reduce_165(val, _values, result)
    		result = Node::RedoCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 680)
  def _reduce_166(val, _values, result)
    		result = Node::RetryCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 685)
  def _reduce_167(val, _values, result)
    		result = Node::RaiseCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 690)
  def _reduce_168(val, _values, result)
    		result = Node::ReturnCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 695)
  def _reduce_169(val, _values, result)
    		result = Node::YieldCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 698)
  def _reduce_170(val, _values, result)
    @lex.indent_push(:LPAREN_G); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 701)
  def _reduce_171(val, _values, result)
    	        result = Node::Group(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 704)
  def _reduce_172(val, _values, result)
    @lex.indent_push(:BACK_QUOTE); @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 706)
  def _reduce_173(val, _values, result)
    	        result = Node::XString(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 746)
  def _reduce_174(val, _values, result)
    		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 751)
  def _reduce_175(val, _values, result)
     	       result.pipeout = :RESULT
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 804)
  def _reduce_176(val, _values, result)
    		result = Node::RubyExp(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 807)
  def _reduce_177(val, _values, result)
    @lex.indent_push(:LBLACK_A)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 809)
  def _reduce_178(val, _values, result)
    		result = Node::Array(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 814)
  def _reduce_179(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 819)
  def _reduce_180(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 824)
  def _reduce_181(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 828)
  def _reduce_182(val, _values, result)
    @lex.indent_push(:LBRACE_H)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 830)
  def _reduce_183(val, _values, result)
    		result = Node::Hash(val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 835)
  def _reduce_184(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
	        result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 840)
  def _reduce_185(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 845)
  def _reduce_186(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[5]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 850)
  def _reduce_187(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 856)
  def _reduce_188(val, _values, result)
    		result = Node::Sequence()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 860)
  def _reduce_189(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 864)
  def _reduce_190(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 868)
  def _reduce_191(val, _values, result)
    		val[1].last_command_to_async
		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 873)
  def _reduce_192(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 878)
  def _reduce_193(val, _values, result)
    	        result = Node::Sequence(val[0]) 
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 882)
  def _reduce_194(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 887)
  def _reduce_195(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 893)
  def _reduce_196(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 899)
  def _reduce_197(val, _values, result)
    	    result = [val[0]]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 903)
  def _reduce_198(val, _values, result)
    	    val[0].push val[1]
	    result = val[0]
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 909)
  def _reduce_199(val, _values, result)
    	    result = Node::Redirection(-1, ">", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 914)
  def _reduce_200(val, _values, result)
    	    result = Node::Redirection(-1, "<", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 919)
  def _reduce_201(val, _values, result)
    	    result = Node::Redirection(val[0], ">", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 924)
  def _reduce_202(val, _values, result)
    	    result = Node::Redirection(val[0], "<", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 203 omitted

# reduce 204 omitted

module_eval(<<'.,.,', 'parser.y', 931)
  def _reduce_205(val, _values, result)
    	    result = Node::Redirection(-1, ">>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 936)
  def _reduce_206(val, _values, result)
    	    result = Node::Redirection(val[0], ">>", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

module_eval(<<'.,.,', 'parser.y', 975)
  def _reduce_235(val, _values, result)
    	    result = Node::Redirection(-1, "&>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 980)
  def _reduce_236(val, _values, result)
    	    result = Node::Redirection(-1, "&>>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

module_eval(<<'.,.,', 'parser.y', 1002)
  def _reduce_249(val, _values, result)
    @lex.cond_push(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1003)
  def _reduce_250(val, _values, result)
    @lex.cond_pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1005)
  def _reduce_251(val, _values, result)
    @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1006)
  def _reduce_252(val, _values, result)
    @lex.lex_state = Lex::EXPR_ARG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1007)
  def _reduce_253(val, _values, result)
    @lex.lex_state = Lex::EXPR_END
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1009)
  def _reduce_254(val, _values, result)
    @lex.indent_pop
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Reish
