#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require "reish/token"
  require "reish/node"

module Reish
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 1157)

  def initialize(lex)
    @yydebug = nil
    @cmpl_mode = nil
    @input_closed = nil
    @err_token = nil

    @lex = lex
  end

  attr_accessor :yydebug
  attr_accessor :cmpl_mode
  attr_accessor :input_closed
  
  attr_reader :err_token

  def next_token
    @lex.racc_token
  end

  def next_roken_cmpl
    @lex.racc_token_cmpl
  end

    def on_error(token_id, token, value_stack)

      if @yydebug || Reish::debug_cmpl?
	require "pp"
  
	puts "Reish: parse error: token line: #{token.line_no} char: #{token.char_no}"
	puts "TOKEN_ID: #{token_to_str(token_id)}"
	puts "TOKEN: #{token.pretty_inspect}"
	puts "VAULE_STACK: \n#{value_stack.pretty_inspect}"
#      puts "_VAULES: \n#{self.pretty_inspect}"
#      yyerrok
      end
      
      case
      when @cmpl_mode
	@cmpl_mode = value_stack
	Reish::Fail ParserComplSupp
      when @input_closed && token.kind_of?(EOFToken)
	Reish::Fail ParserClosingEOFSupp
#      when @input_closed
#	#Reish::Fail ParserClosingSupp
      else
	@err_token = token
	super
      end
    end

  def yyerror(token, msg)
    raise ParseError, msg
  end
    
# Begin Emacs Environment
# Local Variables:
#   mode: ruby
# End:
...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'149,150,270,158,427,158,269,428,102,102,102,102,372,299,149,150,153',
'138,102,145,466,118,119,149,150,192,51,52,53,54,55,56,61,145,158,465',
'102,429,178,153,138,102,422,185,180,185,184,373,184,51,52,53,54,55,56',
'61,103,103,103,103,93,403,95,96,97,99,103,101,124,125,126,127,128,129',
'130,131,132,133,134,135,182,136,137,93,103,95,96,97,99,103,101,124,125',
'126,127,128,129,130,131,132,133,134,135,7,136,137,185,185,185,184,184',
'184,185,185,158,184,184,282,448,36,37,38,39,51,52,53,54,55,56,61,-116',
'68,102,69,71,398,399,106,107,73,158,75,78,182,182,80,82,377,84,182,85',
'86,87,88,89,90,91,93,158,95,96,97,99,-116,101,7,236,237,120,121,238',
'239,240,241,242,243,244,245,149,150,103,36,37,38,39,51,52,53,54,55,56',
'61,178,68,102,69,71,-113,180,366,-116,73,158,75,78,120,121,80,82,158',
'84,383,85,86,87,88,89,90,91,93,158,95,96,97,99,158,101,7,226,227,108',
'109,228,229,230,231,232,233,234,235,362,158,103,36,37,38,39,51,52,53',
'54,55,56,61,161,68,102,69,71,369,158,370,371,73,393,75,78,394,360,80',
'82,396,84,162,85,86,87,88,89,90,91,93,158,95,96,97,99,401,101,7,112',
'113,114,115,407,158,408,409,116,110,111,404,158,158,103,36,37,38,39',
'51,52,53,54,55,56,61,158,68,102,69,71,158,158,308,158,73,158,75,78,415',
'192,80,82,158,84,158,85,86,87,88,89,90,91,93,299,95,96,97,99,158,101',
'7,112,113,114,115,432,158,158,434,116,110,111,158,158,158,103,36,37',
'38,39,51,52,53,54,55,56,61,158,68,102,69,71,299,443,444,158,73,450,75',
'78,451,158,80,82,289,84,158,85,86,87,88,89,90,91,93,158,95,96,97,99',
'158,101,7,112,113,114,115,459,460,461,158,116,110,111,464,158,158,103',
'36,37,38,39,51,52,53,54,55,56,61,275,68,102,69,71,158,158,158,158,73',
'158,75,78,158,158,80,82,158,84,158,85,86,87,88,89,90,91,93,158,95,96',
'97,99,207,101,7,112,113,114,115,482,158,158,158,116,110,111,158,158',
'158,103,36,37,38,39,51,52,53,54,55,56,61,158,68,102,69,71,158,158,158',
'104,73,158,75,78,275,158,80,82,158,84,158,85,86,87,88,89,90,91,93,,95',
'96,97,99,,101,7,,,,3,4,,,,,,,,,,103,36,37,38,39,51,52,53,54,55,56,61',
',68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91,93,,95',
'96,97,99,,101,7,-266,-266,-266,-266,,,,,116,110,111,,,,103,36,37,38',
'39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85',
'86,87,88,89,90,91,93,,95,96,97,99,,101,7,112,113,114,115,,,,,116,110',
'111,,,,103,36,37,38,39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75',
'78,,,80,82,,84,,85,86,87,88,89,90,91,93,,95,96,97,99,,101,7,112,113',
'114,115,,,,,116,110,111,,,,103,36,37,38,39,51,52,53,54,55,56,61,,68',
'102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91,93,,95,96',
'97,99,,101,7,112,113,114,115,,,,,116,110,111,,,,103,36,37,38,39,51,52',
'53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88',
'89,90,91,93,,95,96,97,99,,101,7,-266,-266,-266,-266,,,,,116,110,111',
',,,103,36,37,38,39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78',
',,80,82,,84,,85,86,87,88,89,90,91,93,,95,96,97,99,,101,7,-266,-266,-266',
'-266,,,,,116,110,111,,,,103,36,37,38,39,51,52,53,54,55,56,61,,68,102',
'69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91,93,,95,96,97,99',
',101,7,112,113,114,115,,,,,116,110,111,,,,103,36,37,38,39,51,52,53,54',
'55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90',
'91,93,,95,96,97,99,,101,7,112,113,114,115,,,,,116,110,111,,,,103,36',
'37,38,39,51,52,53,54,55,56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84',
',85,86,87,88,89,90,91,93,,95,96,97,99,,101,7,-266,-266,-266,-266,,,',
',116,110,111,,,,103,36,37,38,39,51,52,53,54,55,56,61,,68,102,69,71,',
',,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91,93,,95,96,97,99,,101',
'7,112,113,114,115,,,,,116,110,111,,,,103,36,37,38,39,51,52,53,54,55',
'56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91',
'93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38,39,51,52,53,54,55',
'56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91',
'93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38,39,51,52,53,54,55',
'56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91',
'93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38,39,51,52,53,54,55',
'56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91',
'93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38,39,51,52,53,54,55',
'56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91',
'93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38,39,51,52,53,54,55',
'56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91',
'93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38,39,51,52,53,54,55',
'56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91',
'93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38,39,51,52,53,54,55',
'56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91',
'93,,95,96,97,99,,101,7,,,,,,,,,,,,,,,103,36,37,38,39,51,52,53,54,55',
'56,61,,68,102,69,71,,,,,73,,75,78,,,80,82,,84,,85,86,87,88,89,90,91',
'93,,95,96,97,99,,101,,,,,,,153,138,,,,,,,,103,51,52,53,54,55,56,61,',
',,,,,153,138,,,,,,,,,51,52,53,54,55,56,61,,,,,93,,95,96,97,99,,101,124',
'125,126,127,128,129,130,131,132,133,134,135,,136,137,93,,95,96,97,99',
',101,124,125,126,127,128,129,130,131,132,133,134,135,,136,137,153,138',
',,,,,,,,51,52,53,54,55,56,61,,,,,,,153,138,,,,,,,,,51,52,53,54,55,56',
'61,,,,,93,,95,96,97,99,,101,124,125,126,127,128,129,130,131,132,133',
'134,135,,136,137,93,,95,96,97,99,,101,124,125,126,127,128,129,130,131',
'132,133,134,135,,136,137,153,138,,,,,,,,,51,52,53,54,55,56,61,,,,,,',
'153,138,,,,,,,,,51,52,53,54,55,56,61,,,,,93,,95,96,97,99,,101,124,125',
'126,127,128,129,130,131,132,133,134,135,,136,137,93,,95,96,97,99,,101',
'124,125,126,127,128,129,130,131,132,133,134,135,,136,137,153,138,,,',
',,,,,51,52,53,54,55,56,61,,,,,,,153,138,,,,,,,,,51,52,53,54,55,56,61',
',,,,93,,95,96,97,99,,101,124,125,126,127,128,129,130,131,132,133,134',
'135,,136,137,93,,95,96,97,99,,101,124,125,126,127,128,129,130,131,132',
'133,134,135,,136,137,153,138,,,,,,,,,51,52,53,54,55,56,61,,,,,,,224',
'138,,,,,,,,,51,52,53,54,55,56,61,,,,,93,,95,96,97,99,,101,124,125,126',
'127,128,129,130,131,132,133,134,135,,136,137,93,,95,96,97,99,,101,,',
',224,138,,,,,,,,345,51,52,53,54,55,56,61,,,224,138,,,,,,,224,138,51',
'52,53,54,55,56,61,,51,52,53,54,55,56,61,93,,95,96,97,99,,101,,,,,,,',
',,,,93,355,95,96,97,99,,101,93,,95,96,97,99,,101,,,,,357,224,138,,,',
',,255,224,138,51,52,53,54,55,56,61,,51,52,53,54,55,56,61,112,113,114',
'115,,,,,116,110,111,,,,,185,,,184,93,,95,96,97,99,,101,93,,95,96,97',
'99,,101,,,,,253,,,,,,,,343,36,37,38,312,51,52,53,54,55,56,61,,,102,',
'71,,,,,73,,75,78,,,80,82,,84,,,,,,,,,93,,95,,97,99,,101,,36,37,38,312',
'51,52,53,54,55,56,61,,,102,103,71,,,,,73,,75,78,,,80,82,,84,,,,,,,,',
'93,,95,,97,99,,101,,36,37,38,312,51,52,53,54,55,56,61,,,102,103,71,',
',,,73,,75,78,,,80,82,,84,,,,,,,,,93,,95,,97,99,,101,,36,37,38,312,51',
'52,53,54,55,56,61,,,102,103,71,,,,,73,,75,78,,,80,82,,84,,,,,,,,,93',
',95,96,97,99,,101,,36,37,38,312,51,52,53,54,55,56,61,,,102,103,71,,',
',,73,,75,78,,,80,82,,84,,,,,,,,,93,,95,,97,99,,101,,36,37,38,312,51',
'52,53,54,55,56,61,,,102,103,71,,,,,73,,75,78,,,80,82,,84,,,,,,,,,93',
',95,96,97,99,,101,,36,37,38,312,51,52,53,54,55,56,61,,,102,103,71,,',
',,73,,75,78,,,80,82,,84,470,,,,,,315,138,93,,95,,97,99,,101,51,52,53',
'54,55,56,61,,112,113,114,115,,,,103,116,110,111,,,,,185,,,184,,,,,,224',
'138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,224,138,,,,,,,,182,51',
'52,53,54,55,56,61,,,,,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55',
'56,61,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,,,,,224',
'138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,224,138,93,,95,96,97',
'99,,101,51,52,53,54,55,56,61,,,,,,,224,138,93,,95,96,97,99,,101,51,52',
'53,54,55,56,61,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,',
',,,,,315,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,224,138,93',
',95,96,97,99,,101,51,52,53,54,55,56,61,,,,,,,224,138,93,,95,96,97,99',
',101,51,52,53,54,55,56,61,,,224,138,93,,95,96,97,99,,101,51,52,53,54',
'55,56,61,,,,,,,315,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,224',
'138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,,,,,224,138,93,,95,96',
'97,99,,101,51,52,53,54,55,56,61,,,224,138,93,,95,96,97,99,,101,51,52',
'53,54,55,56,61,,,,,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56',
'61,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,,,,,224,138',
'93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,224,138,93,,95,96,97,99',
',101,51,52,53,54,55,56,61,,,,,,,224,138,93,,95,96,97,99,,101,51,52,53',
'54,55,56,61,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,,',
',,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,315,138,93,,95',
'96,97,99,,101,51,52,53,54,55,56,61,,,,,,,315,138,93,,95,96,97,99,,101',
'51,52,53,54,55,56,61,,,315,138,93,,95,96,97,99,,101,51,52,53,54,55,56',
'61,,,,,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,224,138',
'93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,,,,,224,138,93,,95,96,97',
'99,,101,51,52,53,54,55,56,61,,,224,138,93,,95,96,97,99,,101,51,52,53',
'54,55,56,61,,,,,,,224,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61',
',,315,138,93,,95,96,97,99,,101,51,52,53,54,55,56,61,,,,,,,418,,93,,95',
'96,97,99,,101,,,,,,,,,,,,93,,95,96,97,99,,101,112,113,114,115,112,113',
'114,115,116,110,111,,116,110,111,427,,,428,427,,,428,124,125,126,127',
'128,129,130,131,132,133,134,135,,136,137,,,,,,,,,,,429,,,,429,124,125',
'126,127,128,129,130,131,132,133,134,135,,136,137' ]
        racc_action_table = arr = ::Array.new(3445, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'31,31,160,403,492,317,160,492,376,68,478,160,278,437,311,311,31,31,69',
'31,436,20,20,143,143,437,31,31,31,31,31,31,31,311,374,436,449,492,433',
'143,143,39,374,417,433,159,417,279,159,143,143,143,143,143,143,143,376',
'68,478,160,31,317,31,31,31,31,69,31,31,31,31,31,31,31,31,31,31,31,31',
'31,417,31,31,143,449,143,143,143,143,39,143,143,143,143,143,143,143',
'143,143,143,143,143,143,262,143,143,77,179,168,77,179,168,305,178,410',
'305,178,168,410,262,262,262,262,262,262,262,262,262,262,262,309,262',
'262,262,262,309,309,2,2,262,283,262,262,77,179,262,262,284,262,305,262',
'262,262,262,262,262,262,262,285,262,262,262,262,328,262,473,127,127',
'328,328,127,127,127,127,127,127,127,127,33,33,262,473,473,473,473,473',
'473,473,473,473,473,473,76,473,473,473,473,25,76,273,25,473,287,473',
'473,25,25,473,473,34,473,291,473,473,473,473,473,473,473,473,264,473',
'473,473,473,295,473,472,126,126,5,5,126,126,126,126,126,126,126,126',
'263,299,473,472,472,472,472,472,472,472,472,472,472,472,62,472,472,472',
'472,277,302,277,277,472,303,472,472,304,261,472,472,307,472,64,472,472',
'472,472,472,472,472,472,65,472,472,472,472,316,472,7,6,6,6,6,359,66',
'359,359,6,6,6,318,320,67,472,7,7,7,7,7,7,7,7,7,7,7,70,7,7,7,7,78,79',
'201,80,7,365,7,7,367,83,7,7,190,7,92,7,7,7,7,7,7,7,7,187,7,7,7,7,94',
'7,457,298,298,298,298,382,385,180,389,298,298,298,392,395,398,7,457',
'457,457,457,457,457,457,457,457,457,457,399,457,457,457,457,274,405',
'406,176,457,411,457,457,413,415,457,457,175,457,419,457,457,457,457',
'457,457,457,457,420,457,457,457,457,421,457,456,208,208,208,208,425',
'428,430,174,208,208,208,435,172,98,457,456,456,456,456,456,456,456,456',
'456,456,456,164,456,456,456,456,162,161,445,446,456,447,456,456,448',
'100,456,456,454,456,148,456,456,456,456,456,456,456,456,147,456,456',
'456,456,104,456,455,209,209,209,209,458,462,471,110,209,209,209,111',
'121,477,456,455,455,455,455,455,455,455,455,455,455,455,120,455,455',
'455,455,119,118,112,1,455,115,455,455,487,114,455,455,490,455,113,455',
'455,455,455,455,455,455,455,,455,455,455,455,,455,0,,,,0,0,,,,,,,,,',
'455,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,0,,,,,0,,0,0,,,0,0,,0,,0,0,0,0,0,0',
'0,0,,0,0,0,0,,0,294,324,324,324,324,,,,,324,324,324,,,,0,294,294,294',
'294,294,294,294,294,294,294,294,,294,294,294,294,,,,,294,,294,294,,',
'294,294,,294,,294,294,294,294,294,294,294,294,,294,294,294,294,,294',
'288,386,386,386,386,,,,,386,386,386,,,,294,288,288,288,288,288,288,288',
'288,288,288,288,,288,288,288,288,,,,,288,,288,288,,,288,288,,288,,288',
'288,288,288,288,288,288,288,,288,288,288,288,,288,286,479,479,479,479',
',,,,479,479,479,,,,288,286,286,286,286,286,286,286,286,286,286,286,',
'286,286,286,286,,,,,286,,286,286,,,286,286,,286,,286,286,286,286,286',
'286,286,286,,286,286,286,286,,286,474,480,480,480,480,,,,,480,480,480',
',,,286,474,474,474,474,474,474,474,474,474,474,474,,474,474,474,474',
',,,,474,,474,474,,,474,474,,474,,474,474,474,474,474,474,474,474,,474',
'474,474,474,,474,260,326,326,326,326,,,,,326,326,326,,,,474,260,260',
'260,260,260,260,260,260,260,260,260,,260,260,260,260,,,,,260,,260,260',
',,260,260,,260,,260,260,260,260,260,260,260,260,,260,260,260,260,,260',
'109,323,323,323,323,,,,,323,323,323,,,,260,109,109,109,109,109,109,109',
'109,109,109,109,,109,109,109,109,,,,,109,,109,109,,,109,109,,109,,109',
'109,109,109,109,109,109,109,,109,109,109,109,,109,108,481,481,481,481',
',,,,481,481,481,,,,109,108,108,108,108,108,108,108,108,108,108,108,',
'108,108,108,108,,,,,108,,108,108,,,108,108,,108,,108,108,108,108,108',
'108,108,108,,108,108,108,108,,108,484,489,489,489,489,,,,,489,489,489',
',,,108,484,484,484,484,484,484,484,484,484,484,484,,484,484,484,484',
',,,,484,,484,484,,,484,484,,484,,484,484,484,484,484,484,484,484,,484',
'484,484,484,,484,165,325,325,325,325,,,,,325,325,325,,,,484,165,165',
'165,165,165,165,165,165,165,165,165,,165,165,165,165,,,,,165,,165,165',
',,165,165,,165,,165,165,165,165,165,165,165,165,,165,165,165,165,,165',
'215,276,276,276,276,,,,,276,276,276,,,,165,215,215,215,215,215,215,215',
'215,215,215,215,,215,215,215,215,,,,,215,,215,215,,,215,215,,215,,215',
'215,215,215,215,215,215,215,,215,215,215,215,,215,214,,,,,,,,,,,,,,',
'215,214,214,214,214,214,214,214,214,214,214,214,,214,214,214,214,,,',
',214,,214,214,,,214,214,,214,,214,214,214,214,214,214,214,214,,214,214',
'214,214,,214,84,,,,,,,,,,,,,,,214,84,84,84,84,84,84,84,84,84,84,84,',
'84,84,84,84,,,,,84,,84,84,,,84,84,,84,,84,84,84,84,84,84,84,84,,84,84',
'84,84,,84,212,,,,,,,,,,,,,,,84,212,212,212,212,212,212,212,212,212,212',
'212,,212,212,212,212,,,,,212,,212,212,,,212,212,,212,,212,212,212,212',
'212,212,212,212,,212,212,212,212,,212,211,,,,,,,,,,,,,,,212,211,211',
'211,211,211,211,211,211,211,211,211,,211,211,211,211,,,,,211,,211,211',
',,211,211,,211,,211,211,211,211,211,211,211,211,,211,211,211,211,,211',
'210,,,,,,,,,,,,,,,211,210,210,210,210,210,210,210,210,210,210,210,,210',
'210,210,210,,,,,210,,210,210,,,210,210,,210,,210,210,210,210,210,210',
'210,210,,210,210,210,210,,210,186,,,,,,,,,,,,,,,210,186,186,186,186',
'186,186,186,186,186,186,186,,186,186,186,186,,,,,186,,186,186,,,186',
'186,,186,,186,186,186,186,186,186,186,186,,186,186,186,186,,186,188',
',,,,,,,,,,,,,,186,188,188,188,188,188,188,188,188,188,188,188,,188,188',
'188,188,,,,,188,,188,188,,,188,188,,188,,188,188,188,188,188,188,188',
'188,,188,188,188,188,,188,213,,,,,,,,,,,,,,,188,213,213,213,213,213',
'213,213,213,213,213,213,,213,213,213,213,,,,,213,,213,213,,,213,213',
',213,,213,213,213,213,213,213,213,213,,213,213,213,213,,213,,,,,,,85',
'85,,,,,,,,213,85,85,85,85,85,85,85,,,,,,,86,86,,,,,,,,,86,86,86,86,86',
'86,86,,,,,85,,85,85,85,85,,85,85,85,85,85,85,85,85,85,85,85,85,85,,85',
'85,86,,86,86,86,86,,86,86,86,86,86,86,86,86,86,86,86,86,86,,86,86,89',
'89,,,,,,,,,89,89,89,89,89,89,89,,,,,,,90,90,,,,,,,,,90,90,90,90,90,90',
'90,,,,,89,,89,89,89,89,,89,89,89,89,89,89,89,89,89,89,89,89,89,,89,89',
'90,,90,90,90,90,,90,90,90,90,90,90,90,90,90,90,90,90,90,,90,90,91,91',
',,,,,,,,91,91,91,91,91,91,91,,,,,,,192,192,,,,,,,,,192,192,192,192,192',
'192,192,,,,,91,,91,91,91,91,,91,91,91,91,91,91,91,91,91,91,91,91,91',
',91,91,192,,192,192,192,192,,192,192,192,192,192,192,192,192,192,192',
'192,192,192,,192,192,194,194,,,,,,,,,194,194,194,194,194,194,194,,,',
',,,156,156,,,,,,,,,156,156,156,156,156,156,156,,,,,194,,194,194,194',
'194,,194,194,194,194,194,194,194,194,194,194,194,194,194,,194,194,156',
',156,156,156,156,,156,156,156,156,156,156,156,156,156,156,156,156,156',
',156,156,116,116,,,,,,,,,116,116,116,116,116,116,116,,,,,,,235,235,',
',,,,,,,235,235,235,235,235,235,235,,,,,116,,116,116,116,116,,116,116',
'116,116,116,116,116,116,116,116,116,116,116,,116,116,235,,235,235,235',
'235,,235,,,,244,244,,,,,,,,235,244,244,244,244,244,244,244,,,245,245',
',,,,,,135,135,245,245,245,245,245,245,245,,135,135,135,135,135,135,135',
'244,,244,244,244,244,,244,,,,,,,,,,,,245,244,245,245,245,245,,245,135',
',135,135,135,135,,135,,,,,245,134,134,,,,,,135,234,234,134,134,134,134',
'134,134,134,,234,234,234,234,234,234,234,193,193,193,193,,,,,193,193',
'193,,,,,193,,,193,134,,134,134,134,134,,134,234,,234,234,234,234,,234',
',,,,134,,,,,,,,234,220,220,220,220,220,220,220,220,220,220,220,,,220',
',220,,,,,220,,220,220,,,220,220,,220,,,,,,,,,220,,220,,220,220,,220',
',219,219,219,219,219,219,219,219,219,219,219,,,219,220,219,,,,,219,',
'219,219,,,219,219,,219,,,,,,,,,219,,219,,219,219,,219,,202,202,202,202',
'202,202,202,202,202,202,202,,,202,219,202,,,,,202,,202,202,,,202,202',
',202,,,,,,,,,202,,202,,202,202,,202,,217,217,217,217,217,217,217,217',
'217,217,217,,,217,202,217,,,,,217,,217,217,,,217,217,,217,,,,,,,,,217',
',217,217,217,217,,217,,440,440,440,440,440,440,440,440,440,440,440,',
',440,217,440,,,,,440,,440,440,,,440,440,,440,,,,,,,,,440,,440,,440,440',
',440,,218,218,218,218,218,218,218,218,218,218,218,,,218,440,218,,,,',
'218,,218,218,,,218,218,,218,,,,,,,,,218,,218,218,218,218,,218,,441,441',
'441,441,441,441,441,441,441,441,441,,,441,218,441,,,,,441,,441,441,',
',441,441,,441,443,,,,,,443,443,441,,441,,441,441,,441,443,443,443,443',
'443,443,443,,301,301,301,301,,,,441,301,301,301,,,,,301,,,301,,,,,,136',
'136,443,,443,443,443,443,,443,136,136,136,136,136,136,136,,,227,227',
',,,,,,,301,227,227,227,227,227,227,227,,,,,,,128,128,136,,136,136,136',
'136,,136,128,128,128,128,128,128,128,,,129,129,227,,227,227,227,227',
',227,129,129,129,129,129,129,129,,,,,,,130,130,128,,128,128,128,128',
',128,130,130,130,130,130,130,130,,,131,131,129,,129,129,129,129,,129',
'131,131,131,131,131,131,131,,,,,,,132,132,130,,130,130,130,130,,130',
'132,132,132,132,132,132,132,,,133,133,131,,131,131,131,131,,131,133',
'133,133,133,133,133,133,,,,,,,272,272,132,,132,132,132,132,,132,272',
'272,272,272,272,272,272,,,226,226,133,,133,133,133,133,,133,226,226',
'226,226,226,226,226,,,,,,,228,228,272,,272,272,272,272,,272,228,228',
'228,228,228,228,228,,,137,137,226,,226,226,226,226,,226,137,137,137',
'137,137,137,137,,,,,,,271,271,228,,228,228,228,228,,228,271,271,271',
'271,271,271,271,,,238,238,137,,137,137,137,137,,137,238,238,238,238',
'238,238,238,,,,,,,125,125,271,,271,271,271,271,,271,125,125,125,125',
'125,125,125,,,124,124,238,,238,238,238,238,,238,124,124,124,124,124',
'124,124,,,,,,,229,229,125,,125,125,125,125,,125,229,229,229,229,229',
'229,229,,,230,230,124,,124,124,124,124,,124,230,230,230,230,230,230',
'230,,,,,,,231,231,229,,229,229,229,229,,229,231,231,231,231,231,231',
'231,,,232,232,230,,230,230,230,230,,230,232,232,232,232,232,232,232',
',,,,,,233,233,231,,231,231,231,231,,231,233,233,233,233,233,233,233',
',,236,236,232,,232,232,232,232,,232,236,236,236,236,236,236,236,,,,',
',,242,242,233,,233,233,233,233,,233,242,242,242,242,242,242,242,,,205',
'205,236,,236,236,236,236,,236,205,205,205,205,205,205,205,,,,,,,203',
'203,242,,242,242,242,242,,242,203,203,203,203,203,203,203,,,485,485',
'205,,205,205,205,205,,205,485,485,485,485,485,485,485,,,,,,,237,237',
'203,,203,203,203,203,,203,237,237,237,237,237,237,237,,,243,243,485',
',485,485,485,485,,485,243,243,243,243,243,243,243,,,,,,,241,241,237',
',237,237,237,237,,237,241,241,241,241,241,241,241,,,239,239,243,,243',
'243,243,243,,243,239,239,239,239,239,239,239,,,,,,,240,240,241,,241',
'241,241,241,,241,240,240,240,240,240,240,240,,,368,368,239,,239,239',
'239,239,,239,368,368,368,368,368,368,368,,,,,,,368,,240,,240,240,240',
'240,,240,,,,,,,,,,,,368,,368,368,368,368,,368,379,379,379,379,381,381',
'381,381,379,379,379,,381,381,381,379,,,379,381,,,381,29,29,29,29,29',
'29,29,29,29,29,29,29,,29,29,,,,,,,,,,,379,,,,381,122,122,122,122,122',
'122,122,122,122,122,122,122,,122,122' ]
        racc_action_check = arr = ::Array.new(3445, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   523,   510,   119,   nil,   nil,   210,   287,   275,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    -1,   nil,   nil,   nil,   nil,   190,   nil,   nil,   nil,  3324,
   nil,    -8,   nil,   170,   191,   nil,   nil,   nil,   nil,    -2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   247,   nil,   263,   264,   277,   285,   -34,   -25,
   298,   nil,   nil,   nil,   nil,   nil,   144,    88,   303,   304,
   306,   nil,   nil,   270,  1267,  1697,  1720,   nil,   nil,  1787,
  1810,  1877,   317,   nil,   331,   nil,   nil,   nil,   409,   nil,
   436,   nil,   nil,   nil,   473,   nil,   nil,   nil,   957,   895,
   465,   469,   491,   503,   498,   494,  2057,   nil,   490,   489,
   484,   470,  3354,   nil,  2965,  2946,   152,    90,  2694,  2713,
  2736,  2755,  2778,  2797,  2219,  2162,  2652,  2881,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   450,   441,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1990,   nil,   nil,    27,
   -32,   428,   427,   nil,   394,  1081,   nil,   nil,    90,   nil,
   nil,   nil,   408,   nil,   403,   367,   368,   nil,    95,    89,
   340,   nil,   nil,   nil,   nil,   nil,  1515,   296,  1577,   nil,
   315,   nil,  1900,  2265,  1967,   nil,   nil,   nil,   nil,   nil,
   nil,   254,  2380,  3156,   nil,  3133,   nil,   nil,   411,   473,
  1453,  1391,  1329,  1639,  1205,  1143,   nil,  2427,  2521,  2333,
  2286,   nil,   nil,   nil,   nil,   nil,  2839,  2671,  2862,  2988,
  3007,  3030,  3049,  3072,  2227,  2080,  3091,  3198,  2923,  3259,
  3282,  3240,  3114,  3217,  2135,  2154,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   833,   246,    89,   214,   202,   nil,   nil,   nil,   nil,   nil,
   nil,  2904,  2820,   171,   335,   nil,  1155,   241,   -16,    19,
   nil,   nil,   nil,   122,   119,   140,   709,   184,   647,   nil,
   nil,   183,   nil,   nil,   585,   207,   nil,   nil,   349,   223,
   nil,  2649,   242,   221,   239,    94,   nil,   245,   nil,   120,
   nil,     6,   nil,   nil,   nil,   nil,   246,   -13,   272,   nil,
   284,   nil,   nil,   907,   597,  1093,   845,   nil,   153,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   276,
   nil,   nil,   nil,   nil,   nil,   308,   nil,   280,  3301,   nil,
   nil,   nil,   nil,   nil,    16,   nil,   -35,   nil,   nil,  3374,
   nil,  3378,   328,   nil,   nil,   339,   659,   nil,   nil,   331,
   nil,   nil,   345,   nil,   nil,   346,   nil,   nil,   347,   360,
   nil,   nil,   nil,   -15,   nil,   337,   357,   nil,   nil,   nil,
    96,   359,   nil,   350,   nil,   374,   nil,    25,   nil,   379,
   388,   393,   nil,   nil,   nil,   390,   nil,   nil,   368,   nil,
   392,   nil,   nil,   -10,   nil,   397,   -23,   -35,   nil,   nil,
  2474,  2568,   nil,  2610,   nil,   429,   430,   432,   435,    -7,
   nil,   nil,   nil,   nil,   439,   461,   399,   337,   437,   nil,
   nil,   nil,   463,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   464,   213,   151,   771,   nil,   nil,   471,   -33,   721,
   783,   969,   nil,   nil,  1019,  3175,   nil,   469,   nil,  1031,
   501,   nil,   -14,   nil,   nil ]

racc_action_default = [
  -266,  -266,  -266,    -2,    -3,    -4,    -7,  -266,   -18,   -19,
   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,
   -30,   -33,   -34,   -35,   -36,   -37,   -42,   -43,   -44,   -47,
   -46,   -65,   -59,   -65,  -258,   -75,   -76,   -77,   -78,   -79,
   -87,   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,
   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -106,
  -107,  -262,  -266,  -114,  -266,  -258,  -258,  -258,  -266,  -266,
  -258,  -128,  -261,  -260,  -261,  -260,  -265,  -266,  -258,  -258,
  -258,  -261,  -260,  -266,  -266,   -80,   -80,  -171,  -172,   -80,
   -80,   -80,  -258,  -177,  -258,  -179,  -262,  -182,  -258,  -184,
  -258,  -189,  -250,  -251,  -266,    -1,  -252,  -253,    -5,    -6,
  -258,  -258,  -258,  -258,  -258,  -258,   -80,   -17,  -258,  -258,
  -258,  -258,   -45,  -208,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,   -52,   -53,
   -54,   -55,   -56,   -65,   -58,   -62,   -66,  -258,  -258,   -69,
   -70,   -82,   -84,   -85,   -86,   -60,  -265,   -63,  -262,  -266,
  -266,  -258,  -258,  -265,  -130,  -194,  -265,  -265,  -266,  -262,
  -265,  -262,  -258,  -262,  -258,  -266,  -258,  -265,  -266,  -266,
  -258,  -262,  -156,  -157,  -262,  -262,  -266,  -134,  -266,  -262,
  -258,  -265,   -80,  -266,   -81,  -169,  -170,  -173,  -174,  -175,
  -265,  -266,  -266,  -265,  -185,  -265,  -190,   495,    -8,    -9,
  -266,  -266,  -266,  -266,  -266,  -266,   -16,  -266,  -266,  -266,
  -266,  -209,  -210,  -248,  -249,  -211,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -216,  -219,  -222,  -225,
  -228,  -231,  -234,  -243,  -237,  -240,  -246,  -247,   -57,   -83,
  -199,   -71,  -199,  -266,  -258,  -259,  -118,  -108,  -109,  -110,
  -111,  -266,  -266,  -266,  -134,   -48,  -204,  -195,  -266,  -266,
  -121,  -122,  -262,  -258,  -266,  -258,  -266,  -258,  -266,  -146,
  -265,  -266,  -262,  -262,  -266,  -258,  -256,  -257,  -151,  -258,
  -265,  -266,  -258,  -266,  -266,  -266,  -165,  -266,  -265,  -181,
   -47,   -65,   -79,  -263,   -50,   -51,  -266,  -258,  -266,  -191,
  -258,   -10,   -11,   -12,   -13,   -14,   -15,   -31,   -37,   -32,
   -38,   -40,   -39,   -41,  -212,  -213,  -217,  -220,  -223,  -226,
  -229,  -232,  -235,  -244,  -238,  -241,  -214,  -215,  -218,  -221,
  -224,  -227,  -230,  -233,  -236,  -245,  -239,  -242,  -265,  -200,
   -73,  -265,  -264,   -64,  -112,  -258,  -117,  -136,  -132,  -262,
  -262,  -262,  -119,  -120,  -258,  -124,  -266,  -127,  -265,  -266,
  -265,  -266,  -266,  -148,  -149,  -258,  -155,  -150,  -135,  -266,
  -159,  -265,  -258,  -162,  -164,  -258,  -263,  -263,  -258,  -258,
  -180,  -183,  -186,  -258,  -188,  -266,  -266,  -262,  -262,  -262,
  -258,  -266,   -61,  -266,  -129,  -258,   -49,  -266,  -262,  -258,
  -258,  -258,  -123,  -262,  -126,  -266,  -139,  -140,  -141,  -143,
  -266,  -145,  -147,  -152,  -158,  -266,  -266,  -134,  -176,  -178,
  -266,  -266,  -187,  -266,   -67,  -258,  -258,  -258,  -258,  -266,
   -68,  -115,  -137,  -262,  -258,  -196,  -197,  -198,  -266,  -138,
  -142,  -144,  -258,  -154,  -160,  -262,  -163,  -166,  -167,  -168,
  -263,  -258,  -201,  -202,  -203,   -72,   -74,  -258,  -266,  -205,
  -206,  -207,  -125,  -153,  -266,  -266,  -193,  -130,  -133,  -262,
  -258,  -131,  -266,  -192,  -161 ]

racc_goto_table = [
    49,   177,   176,   191,   274,   400,   311,    49,   300,   155,
   181,   310,   123,    24,   331,   333,   426,   259,   431,   159,
    24,   309,   266,   172,   317,   174,   320,   410,   310,   310,
   264,   280,   190,   281,   195,   196,   328,   328,   197,   198,
   199,   292,   171,   267,   173,   163,   166,   167,   168,   169,
   170,   189,   358,   374,   361,   414,   306,   260,   262,   327,
   329,   330,   332,   417,   412,   216,     6,   156,   259,   143,
   368,   122,     5,   117,   392,   105,   467,     2,   313,   152,
   203,   205,   319,   277,    49,     1,   nil,   nil,   438,   439,
   nil,   nil,   364,   365,   nil,   367,   nil,    24,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   221,   nil,   nil,    49,    49,
   nil,   nil,   293,   nil,   nil,   nil,   nil,   nil,   nil,   258,
   nil,    24,    24,   nil,    48,   nil,   nil,   nil,   nil,   494,
   nil,    48,   nil,   152,   152,   nil,   nil,   152,   152,   152,
   268,   305,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   193,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
   nil,   nil,   485,   nil,   152,    49,    50,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   208,   209,   nil,   nil,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,    49,   416,
   nil,   152,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,
   nil,    24,    49,   nil,   152,   nil,   nil,   nil,    48,   nil,
    49,    49,    49,    49,    49,    49,   nil,    49,    49,    49,
    49,   nil,   nil,    24,    24,    24,    24,    24,    24,   nil,
    24,    24,    48,    48,   390,   331,   333,   nil,   395,   nil,
   152,   nil,   152,    50,   311,   311,   nil,   nil,   nil,   310,
   310,   314,   298,   314,   301,   nil,   nil,   nil,   468,   nil,
    49,   nil,    49,   nil,   471,   nil,   nil,    50,    50,   nil,
   nil,   nil,   nil,    24,   nil,    24,   321,   322,   323,   324,
   325,   326,   nil,   nil,   nil,   nil,    49,   nil,    49,    48,
   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,    24,
   nil,    24,   nil,   nil,   nil,   nil,   490,    24,   nil,   nil,
    48,   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,   314,
   314,   157,   nil,   nil,    50,   nil,    48,   491,   nil,   nil,
   nil,   nil,   nil,   nil,    48,    48,    48,    48,    48,    48,
   nil,    48,    48,    48,    48,    50,   nil,    50,   nil,   nil,
   453,   nil,   379,   187,   381,   nil,   424,   469,   463,   462,
   386,    50,   nil,   nil,   nil,   186,   200,   188,   201,    50,
    50,    50,    50,    50,    50,   nil,    50,    50,    50,    50,
   nil,   nil,   nil,   nil,    48,   204,    48,   206,   nil,   nil,
   nil,   160,   nil,   nil,   nil,   nil,   nil,   210,   211,   212,
   213,   214,   215,   nil,   nil,   217,   218,   219,   220,   nil,
    48,   nil,    48,   nil,   nil,   nil,   314,   nil,    48,    50,
   nil,    50,   nil,   nil,   nil,   nil,   202,   nil,   nil,   476,
   nil,   nil,   nil,   nil,   261,   261,   nil,   nil,   nil,   nil,
    49,    49,   nil,   nil,   nil,    50,   nil,    50,   271,   272,
   290,   nil,   nil,    50,   nil,    49,    49,    49,   488,   286,
   nil,   288,   nil,   nil,   nil,   nil,   nil,   294,    24,    24,
    24,   nil,    49,    49,    49,   nil,   nil,   303,   nil,   nil,
   nil,   nil,   nil,   nil,    49,    24,    24,    24,   265,   nil,
   nil,   314,   nil,   nil,   nil,   nil,   nil,    24,   nil,   283,
   nil,   285,   nil,   287,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   295,   nil,   nil,   296,   297,   nil,   nil,   nil,   302,
   nil,   479,   480,   481,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   314,   nil,   nil,   nil,   nil,   479,   480,
   481,   nil,   nil,   nil,   nil,   nil,   nil,   175,   nil,   nil,
   489,   363,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   378,
   nil,   380,   nil,   nil,    48,    48,   nil,   nil,   nil,   387,
   376,   nil,   nil,   388,   nil,   nil,   391,   nil,   nil,    48,
    48,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    48,    48,    48,    50,
    50,   nil,   nil,   nil,   402,   nil,   nil,   405,    48,   nil,
   nil,   nil,   375,   nil,    50,    50,    50,   nil,   nil,   nil,
   nil,   nil,   384,   385,   nil,   nil,   nil,   263,   nil,   nil,
   nil,    50,    50,    50,   273,   nil,   nil,   278,   279,   nil,
   nil,   284,   nil,    50,   nil,   nil,   nil,   nil,   291,   nil,
   nil,   nil,   413,   nil,   nil,   nil,   nil,   nil,   nil,   433,
   nil,   423,   304,   nil,   nil,   nil,   nil,   nil,   nil,   437,
   nil,   307,   nil,   nil,   316,   nil,   318,   nil,   nil,   436,
   nil,   nil,   nil,   nil,   nil,   440,   441,   nil,   nil,   452,
   442,   nil,   nil,   nil,   nil,   nil,   nil,   449,   nil,   419,
   420,   421,   nil,   nil,   nil,   nil,   455,   456,   457,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   472,   473,   474,   475,   483,   445,   446,   447,
   nil,   478,   nil,   nil,   nil,   nil,   nil,   nil,   454,   nil,
   nil,   487,   nil,   458,   nil,   nil,   nil,   nil,   486,   nil,
   nil,   382,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   389,   nil,   nil,   nil,   nil,   nil,   493,   nil,   397,
   222,   225,   nil,   477,   246,   247,   248,   249,   250,   251,
   252,   254,   256,   257,   nil,   484,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   492,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   406,
   nil,   nil,   411,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   425,
   nil,   430,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   435,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   334,   335,   336,   337,   338,   339,   340,   341,
   342,   344,   346,   347,   348,   349,   350,   351,   352,   353,
   354,   356 ]

racc_goto_check = [
    36,    94,    93,   101,    82,   104,    38,    36,    83,    40,
    86,    29,    55,    24,    27,    27,    90,    47,    90,    54,
    24,    25,    75,    89,    33,    89,    33,    53,    29,    29,
    47,    75,    89,    78,     7,     7,    25,    25,     7,     7,
     7,    75,    88,    69,    88,    74,    74,    74,    54,    54,
    74,    88,    51,    79,    51,    84,    75,    50,    50,    21,
    21,    26,    26,    85,    46,     7,     5,    44,    47,    39,
    32,    30,     4,     5,    99,     3,   102,     2,   106,    34,
   108,   110,   111,   112,    36,     1,   nil,   nil,   104,   104,
   nil,   nil,    33,    33,   nil,    83,   nil,    24,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,    36,    36,
   nil,   nil,    86,   nil,   nil,   nil,   nil,   nil,   nil,    40,
   nil,    24,    24,   nil,    35,   nil,   nil,   nil,   nil,    90,
   nil,    35,   nil,    34,    34,   nil,   nil,    34,    34,    34,
    54,     7,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,
   nil,   nil,   104,   nil,    34,    36,    37,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     5,     5,   nil,   nil,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,    36,    33,
   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,
   nil,    24,    36,   nil,    34,   nil,   nil,   nil,    35,   nil,
    36,    36,    36,    36,    36,    36,   nil,    36,    36,    36,
    36,   nil,   nil,    24,    24,    24,    24,    24,    24,   nil,
    24,    24,    35,    35,    86,    27,    27,   nil,    86,   nil,
    34,   nil,    34,    37,    38,    38,   nil,   nil,   nil,    29,
    29,    34,     5,    34,     5,   nil,   nil,   nil,    83,   nil,
    36,   nil,    36,   nil,    33,   nil,   nil,    37,    37,   nil,
   nil,   nil,   nil,    24,   nil,    24,     5,     5,     5,     5,
     5,     5,   nil,   nil,   nil,   nil,    36,   nil,    36,    35,
   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,    24,
   nil,    24,   nil,   nil,   nil,   nil,    33,    24,   nil,   nil,
    35,   nil,    35,   nil,   nil,   nil,   nil,   nil,   nil,    34,
    34,     6,   nil,   nil,    37,   nil,    35,    82,   nil,   nil,
   nil,   nil,   nil,   nil,    35,    35,    35,    35,    35,    35,
   nil,    35,    35,    35,    35,    37,   nil,    37,   nil,   nil,
    86,   nil,     5,    81,     5,   nil,    54,   101,    94,    93,
     5,    37,   nil,   nil,   nil,     6,    81,     6,    81,    37,
    37,    37,    37,    37,    37,   nil,    37,    37,    37,    37,
   nil,   nil,   nil,   nil,    35,     6,    35,     6,   nil,   nil,
   nil,    68,   nil,   nil,   nil,   nil,   nil,     6,     6,     6,
     6,     6,     6,   nil,   nil,     6,     6,     6,     6,   nil,
    35,   nil,    35,   nil,   nil,   nil,    34,   nil,    35,    37,
   nil,    37,   nil,   nil,   nil,   nil,    68,   nil,   nil,    54,
   nil,   nil,   nil,   nil,     6,     6,   nil,   nil,   nil,   nil,
    36,    36,   nil,   nil,   nil,    37,   nil,    37,     6,     6,
    81,   nil,   nil,    37,   nil,    36,    36,    36,    54,     6,
   nil,     6,   nil,   nil,   nil,   nil,   nil,     6,    24,    24,
    24,   nil,    36,    36,    36,   nil,   nil,     6,   nil,   nil,
   nil,   nil,   nil,   nil,    36,    24,    24,    24,    68,   nil,
   nil,    34,   nil,   nil,   nil,   nil,   nil,    24,   nil,    68,
   nil,    68,   nil,    68,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    68,   nil,   nil,    68,    68,   nil,   nil,   nil,    68,
   nil,     5,     5,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil,     5,     5,
     5,   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,
     5,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    81,
   nil,    81,   nil,   nil,    35,    35,   nil,   nil,   nil,    81,
     6,   nil,   nil,    81,   nil,   nil,    81,   nil,   nil,    35,
    35,    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    35,    35,    35,    37,
    37,   nil,   nil,   nil,     6,   nil,   nil,     6,    35,   nil,
   nil,   nil,    68,   nil,    37,    37,    37,   nil,   nil,   nil,
   nil,   nil,    68,    68,   nil,   nil,   nil,    45,   nil,   nil,
   nil,    37,    37,    37,    45,   nil,   nil,    45,    45,   nil,
   nil,    45,   nil,    37,   nil,   nil,   nil,   nil,    45,   nil,
   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,    81,
   nil,     6,    45,   nil,   nil,   nil,   nil,   nil,   nil,    81,
   nil,    45,   nil,   nil,    45,   nil,    45,   nil,   nil,     6,
   nil,   nil,   nil,   nil,   nil,     6,     6,   nil,   nil,    81,
     6,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,    68,
    68,    68,   nil,   nil,   nil,   nil,     6,     6,     6,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     6,     6,     6,     6,    81,    68,    68,    68,
   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,    68,   nil,
   nil,    81,   nil,    68,   nil,   nil,   nil,   nil,     6,   nil,
   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    45,   nil,   nil,   nil,   nil,   nil,     6,   nil,    45,
   113,   113,   nil,    68,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   nil,    68,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    68,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   113 ]

racc_goto_pointer = [
   nil,    85,    77,    73,    72,    66,   287,   -51,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  -158,   nil,   nil,    13,  -181,  -158,  -205,   nil,  -191,
    42,   nil,  -205,  -179,    48,   124,     0,   159,  -196,    38,
   -24,   nil,   nil,   nil,    33,   471,  -298,  -126,   nil,   nil,
   -90,  -208,   nil,  -333,   -20,   -17,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   330,  -117,
   nil,   nil,   nil,   nil,   -20,  -137,   nil,   nil,  -135,  -229,
   nil,   274,  -160,  -179,  -312,  -305,   -67,   nil,   -30,   -50,
  -363,   nil,   nil,   -74,   -75,   nil,   nil,   nil,   nil,  -229,
   nil,   -80,  -361,   nil,  -308,   nil,  -124,   nil,   -18,   nil,
   -19,  -123,   -82,   656,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   276,   165,   nil,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,   141,    25,    28,    26,    27,    29,
   nil,    30,   nil,   nil,   223,   139,   140,   142,    31,   194,
   144,    32,    33,    34,   nil,   nil,   nil,   151,   146,   147,
   nil,   nil,   148,   nil,    35,   154,    40,    41,    42,    43,
    44,    45,    46,    47,    57,    58,    59,    60,   nil,   nil,
    62,    63,    64,    65,   nil,   183,    66,    67,   nil,   nil,
    70,   164,   nil,   nil,   nil,   nil,   nil,    72,   nil,   nil,
   nil,    74,    76,   nil,   nil,    77,   179,    79,    81,   nil,
    83,   nil,   nil,    92,   nil,    94,   nil,    98,   nil,   100,
   nil,   nil,   359,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 93, :_reduce_1,
  1, 93, :_reduce_2,
  1, 93, :_reduce_3,
  1, 94, :_reduce_none,
  2, 94, :_reduce_5,
  2, 94, :_reduce_6,
  1, 96, :_reduce_7,
  3, 96, :_reduce_8,
  3, 96, :_reduce_9,
  4, 97, :_reduce_10,
  4, 97, :_reduce_11,
  4, 97, :_reduce_12,
  4, 97, :_reduce_13,
  4, 97, :_reduce_14,
  4, 97, :_reduce_15,
  3, 97, :_reduce_16,
  2, 97, :_reduce_17,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 100, :_reduce_none,
  4, 112, :_reduce_31,
  4, 112, :_reduce_32,
  1, 112, :_reduce_none,
  1, 113, :_reduce_34,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 115, :_reduce_none,
  4, 115, :_reduce_38,
  4, 115, :_reduce_39,
  4, 117, :_reduce_40,
  4, 117, :_reduce_41,
  1, 117, :_reduce_42,
  1, 117, :_reduce_43,
  1, 114, :_reduce_none,
  2, 114, :_reduce_45,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  0, 124, :_reduce_48,
  2, 124, :_reduce_49,
  1, 125, :_reduce_none,
  1, 125, :_reduce_51,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 118, :_reduce_57,
  2, 123, :_reduce_58,
  1, 123, :_reduce_none,
  2, 133, :_reduce_60,
  5, 134, :_reduce_61,
  2, 135, :_reduce_62,
  1, 136, :_reduce_63,
  3, 136, :_reduce_64,
  0, 132, :_reduce_65,
  1, 132, :_reduce_none,
  5, 140, :_reduce_67,
  5, 140, :_reduce_68,
  1, 141, :_reduce_69,
  1, 144, :_reduce_70,
  1, 142, :_reduce_71,
  5, 142, :_reduce_72,
  0, 145, :_reduce_73,
  3, 145, :_reduce_74,
  1, 130, :_reduce_75,
  1, 130, :_reduce_76,
  1, 130, :_reduce_77,
  1, 130, :_reduce_78,
  1, 130, :_reduce_79,
  0, 99, :_reduce_80,
  1, 99, :_reduce_none,
  1, 131, :_reduce_82,
  2, 131, :_reduce_83,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 148, :_reduce_97,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 158, :_reduce_108,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  4, 108, :_reduce_112,
  1, 162, :_reduce_none,
  1, 120, :_reduce_114,
  6, 163, :_reduce_115,
  1, 164, :_reduce_none,
  4, 109, :_reduce_117,
  3, 165, :_reduce_118,
  4, 110, :_reduce_119,
  4, 110, :_reduce_120,
  3, 168, :_reduce_121,
  3, 169, :_reduce_122,
  3, 170, :_reduce_123,
  1, 171, :_reduce_124,
  4, 171, :_reduce_125,
  5, 111, :_reduce_126,
  4, 153, :_reduce_127,
  1, 172, :_reduce_128,
  4, 166, :_reduce_129,
  0, 174, :_reduce_130,
  7, 174, :_reduce_131,
  0, 177, :_reduce_132,
  4, 177, :_reduce_133,
  0, 175, :_reduce_134,
  2, 175, :_reduce_135,
  0, 176, :_reduce_136,
  2, 176, :_reduce_137,
  6, 151, :_reduce_138,
  5, 179, :_reduce_139,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  2, 182, :_reduce_none,
  1, 182, :_reduce_none,
  6, 152, :_reduce_144,
  5, 183, :_reduce_145,
  3, 149, :_reduce_146,
  5, 149, :_reduce_147,
  4, 149, :_reduce_148,
  3, 185, :_reduce_149,
  4, 184, :_reduce_150,
  3, 187, :_reduce_151,
  4, 186, :_reduce_152,
  6, 186, :_reduce_153,
  5, 186, :_reduce_154,
  3, 188, :_reduce_155,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  5, 150, :_reduce_158,
  4, 189, :_reduce_159,
  6, 155, :_reduce_160,
  10, 190, :_reduce_161,
  1, 191, :_reduce_162,
  3, 191, :_reduce_163,
  4, 154, :_reduce_164,
  3, 192, :_reduce_165,
  5, 193, :_reduce_166,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  2, 101, :_reduce_169,
  2, 102, :_reduce_170,
  1, 103, :_reduce_171,
  1, 104, :_reduce_172,
  2, 105, :_reduce_173,
  2, 106, :_reduce_174,
  2, 107, :_reduce_175,
  5, 127, :_reduce_176,
  1, 195, :_reduce_177,
  5, 128, :_reduce_178,
  1, 197, :_reduce_179,
  4, 116, :_reduce_180,
  1, 198, :_reduce_181,
  1, 159, :_reduce_182,
  4, 156, :_reduce_183,
  1, 199, :_reduce_184,
  1, 200, :_reduce_185,
  3, 200, :_reduce_186,
  4, 200, :_reduce_187,
  4, 157, :_reduce_188,
  1, 201, :_reduce_189,
  1, 202, :_reduce_190,
  2, 202, :_reduce_191,
  7, 203, :_reduce_192,
  5, 203, :_reduce_193,
  1, 173, :_reduce_194,
  2, 173, :_reduce_195,
  5, 173, :_reduce_196,
  5, 173, :_reduce_197,
  5, 173, :_reduce_198,
  0, 143, :_reduce_199,
  1, 143, :_reduce_200,
  4, 143, :_reduce_201,
  4, 143, :_reduce_202,
  4, 143, :_reduce_203,
  1, 204, :_reduce_204,
  5, 204, :_reduce_205,
  5, 204, :_reduce_206,
  5, 204, :_reduce_207,
  1, 122, :_reduce_208,
  2, 122, :_reduce_209,
  2, 147, :_reduce_210,
  2, 147, :_reduce_211,
  3, 147, :_reduce_212,
  3, 147, :_reduce_213,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_216,
  3, 147, :_reduce_217,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_none,
  2, 147, :_reduce_246,
  2, 147, :_reduce_247,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 206, :_reduce_none,
  2, 206, :_reduce_none,
  2, 167, :_reduce_none,
  2, 167, :_reduce_none,
  0, 98, :_reduce_none,
  2, 98, :_reduce_none,
  0, 181, :_reduce_260,
  0, 180, :_reduce_261,
  0, 160, :_reduce_262,
  0, 196, :_reduce_263,
  0, 138, :_reduce_264,
  0, 137, :_reduce_265 ]

racc_reduce_n = 266

racc_shift_n = 495

racc_token_table = {
  false => 0,
  :error => 1,
  :LOWER => 2,
  :MOD_IF => 3,
  :MOD_UNLESS => 4,
  :MOD_WHILE => 5,
  :MOD_UNTIL => 6,
  "=" => 7,
  :DO => 8,
  :LBRACE_I => 9,
  :LBLACK_I => 10,
  :MOD_RESCUE => 11,
  :AND_AND => 12,
  :OR_OR => 13,
  :BANG => 14,
  "." => 15,
  :COLON2 => 16,
  :HIGHER => 17,
  :NL => 18,
  :EOF => 19,
  "&" => 20,
  ";" => 21,
  "|" => 22,
  :BAR_AND => 23,
  :WILDCARD => 24,
  :WORD => 25,
  ")" => 26,
  :LPARLEN_ARG => 27,
  :END => 28,
  "}" => 29,
  :PATH => 30,
  :TEST => 31,
  :SPECIAL => 32,
  :CLASS => 33,
  :STRING => 34,
  :REGEXP => 35,
  :NUMBER => 36,
  :INTEGER => 37,
  :VARIABLE => 38,
  :PSEUDOVARIABLE => 39,
  :SYMBEG => 40,
  "]" => 41,
  :DEF => 42,
  :ID => 43,
  :ALIAS => 44,
  :BEGIN => 45,
  :RESCUE => 46,
  :ASSOC => 47,
  :ELSE => 48,
  :ENSURE => 49,
  :WHILE => 50,
  :DO_COND => 51,
  :UNTIL => 52,
  :IF => 53,
  :ELSIF => 54,
  :THEN => 55,
  :UNLESS => 56,
  :FOR => 57,
  :IN => 58,
  :CASE => 59,
  :WHEN => 60,
  :BREAK => 61,
  :NEXT => 62,
  :REDO => 63,
  :Retry => 64,
  :RAISE => 65,
  :RETURN => 66,
  :YIELD => 67,
  "(" => 68,
  :XSTRING_END => 69,
  :XSTRING_BEG => 70,
  "$" => 71,
  :RUBYEXP => 72,
  :LBLACK_A => 73,
  "," => 74,
  :LBRACE_H => 75,
  ">" => 76,
  "<" => 77,
  :FID => 78,
  :REDIR_WORD => 79,
  :GREATER_GREATER => 80,
  :GREATER_BAR => 81,
  :LESS_GREATER => 82,
  :LESS_LESS => 83,
  :LESS_LESS_MINUS => 84,
  :LESS_LESS_LESS => 85,
  :LESS_AND => 86,
  :GREATER_AND => 87,
  "-" => 88,
  :AND_GREATER => 89,
  :AND_GREATER_GREATER => 90,
  :ID2 => 91 }

racc_nt_base = 92

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LOWER",
  "MOD_IF",
  "MOD_UNLESS",
  "MOD_WHILE",
  "MOD_UNTIL",
  "\"=\"",
  "DO",
  "LBRACE_I",
  "LBLACK_I",
  "MOD_RESCUE",
  "AND_AND",
  "OR_OR",
  "BANG",
  "\".\"",
  "COLON2",
  "HIGHER",
  "NL",
  "EOF",
  "\"&\"",
  "\";\"",
  "\"|\"",
  "BAR_AND",
  "WILDCARD",
  "WORD",
  "\")\"",
  "LPARLEN_ARG",
  "END",
  "\"}\"",
  "PATH",
  "TEST",
  "SPECIAL",
  "CLASS",
  "STRING",
  "REGEXP",
  "NUMBER",
  "INTEGER",
  "VARIABLE",
  "PSEUDOVARIABLE",
  "SYMBEG",
  "\"]\"",
  "DEF",
  "ID",
  "ALIAS",
  "BEGIN",
  "RESCUE",
  "ASSOC",
  "ELSE",
  "ENSURE",
  "WHILE",
  "DO_COND",
  "UNTIL",
  "IF",
  "ELSIF",
  "THEN",
  "UNLESS",
  "FOR",
  "IN",
  "CASE",
  "WHEN",
  "BREAK",
  "NEXT",
  "REDO",
  "Retry",
  "RAISE",
  "RETURN",
  "YIELD",
  "\"(\"",
  "XSTRING_END",
  "XSTRING_BEG",
  "\"$\"",
  "RUBYEXP",
  "LBLACK_A",
  "\",\"",
  "LBRACE_H",
  "\">\"",
  "\"<\"",
  "FID",
  "REDIR_WORD",
  "GREATER_GREATER",
  "GREATER_BAR",
  "LESS_GREATER",
  "LESS_LESS",
  "LESS_LESS_MINUS",
  "LESS_LESS_LESS",
  "LESS_AND",
  "GREATER_AND",
  "\"-\"",
  "AND_GREATER",
  "AND_GREATER_GREATER",
  "ID2",
  "$start",
  "inputunit",
  "simple_list",
  "simple_list_terminator",
  "simple_list1",
  "logical_command",
  "opt_nl",
  "simple_command_element_list",
  "pipeline_command",
  "break_command",
  "next_command",
  "redo_command",
  "retry_command",
  "raise_command",
  "return_command",
  "yield_command",
  "assgin_command",
  "class_command",
  "def_command",
  "alias_command",
  "pipeline",
  "pipeline_element",
  "command",
  "strict_pipeline",
  "trivial_command",
  "strict_pipeline1",
  "simple_command",
  "strict_command",
  "index_ref_command",
  "shell_command",
  "redirection_list",
  "simple_strict_command",
  "command_element_list",
  "command_element",
  "command_element_base",
  "group_command",
  "xstring_command",
  "literal",
  "simple_command_header",
  "simple_command_element_list1",
  "opt_do_block",
  "simple_command_lparen",
  "simple_command_lparen_header",
  "simple_command_lparen_header0",
  "simple_command_element_list_p",
  "indent_pop",
  "lex_end",
  "simple_command_element",
  "do_block",
  "do_block_do",
  "opt_block_arg",
  "compound_list0",
  "do_block_li",
  "block_arg",
  "id",
  "redirection",
  "literal_command",
  "if_command",
  "unless_command",
  "while_command",
  "until_command",
  "begin_command",
  "case_command",
  "for_command",
  "array",
  "hash",
  "symbol",
  "ruby_exp",
  "lex_beg",
  "sym",
  "assginable",
  "index_ref",
  "referenceable",
  "class_command_class",
  "body_list",
  "opt_terms",
  "def_command_def0",
  "def_command_def1",
  "func_arg_list",
  "func_arg_list0",
  "begin_command_begin",
  "compound_list",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "exc_var",
  "then",
  "while_command_while",
  "cond_pop",
  "cond_push",
  "do",
  "until_command_until",
  "if_head",
  "else_else",
  "elsif_clause",
  "if_head_if",
  "elsif_elsif",
  "unless_command_unless",
  "for_command_for",
  "for_arg",
  "case_command_case",
  "case_body",
  "cases",
  "group_command_group",
  "lex_arg",
  "xstring_command_xstring",
  "trivial_command0",
  "array_array",
  "array_element_list",
  "hash_hash",
  "hash_element_list",
  "hash_assoc",
  "compound_list1",
  "redirection_element",
  "opt_nl_arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_1(val, _values, result)
    		@lex.continue = false
		_values.push Node::InputUnit(val[0], val[1])
	        yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_2(val, _values, result)
    		@lex.continue = false
		_values.push Node::NOP
  		yyaccept
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_3(val, _values, result)
                    _values.push Node::EOF
		yyaccept
	    
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_5(val, _values, result)
    		result.last_command_to_async
#		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_6(val, _values, result)
    #		result.pipeout = :RESULT
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_7(val, _values, result)
    		result = Node::Sequence(val[0])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_8(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_9(val, _values, result)
    		val[0].add_command(val[2])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_10(val, _values, result)
    		result = Node::LogicalCommandAA(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_11(val, _values, result)
    		result = Node::LogicalCommandOO(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_12(val, _values, result)
    		result = Node::ModIfCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_13(val, _values, result)
    		result = Node::ModUnlessCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_14(val, _values, result)
    		result = Node::ModWhileCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_15(val, _values, result)
    		result = Node::ModUntilCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_16(val, _values, result)
    		result = Node::ModRescueCommand(val[0], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_17(val, _values, result)
    		result = Node::BangCommand(val[1])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.y', 123)
  def _reduce_31(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 133)
  def _reduce_32(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:BAR_AND, val[3])
	    
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.y', 146)
  def _reduce_34(val, _values, result)
    		result = Node::PipelineCommand(val[0])
            
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.y', 154)
  def _reduce_38(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_39(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 165)
  def _reduce_40(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:DOT, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_41(val, _values, result)
    	       result = val[0]
  	       result.pipe_command(:COLON2, val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 180)
  def _reduce_42(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 184)
  def _reduce_43(val, _values, result)
    		result = Node::PipelineCommand(val[0])
	    
    result
  end
.,.,

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.y', 191)
  def _reduce_45(val, _values, result)
    	        result = Node::Redirector(val[0], val[1])
	  
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

module_eval(<<'.,.,', 'parser.y', 200)
  def _reduce_48(val, _values, result)
        		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 204)
  def _reduce_49(val, _values, result)
    		result.push val[1]
	    
    result
  end
.,.,

# reduce 50 omitted

module_eval(<<'.,.,', 'parser.y', 211)
  def _reduce_51(val, _values, result)
    	        yyerror val[0], "syntax error: wildcasd #{val[0].inspect} can't use this place."
	    
    result
  end
.,.,

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'parser.y', 222)
  def _reduce_57(val, _values, result)
    #	       result = Node::SimpleCommand(val[0], val[1], val[2])
	       result = val[0]
	       result.set_args val[1]
	       result.block = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 231)
  def _reduce_58(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0], Node::CommandElementList.new, val[1])
	       result = val[0]
	       result.set_args Node::CommandElementList.new
	       result.block = val[1]

	    
    result
  end
.,.,

# reduce 59 omitted

module_eval(<<'.,.,', 'parser.y', 249)
  def _reduce_60(val, _values, result)
    #  	       result = Node::SimpleCommand(val[0][0], val[0][1], val[1])
	       result = val[0]
	       result.block = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 258)
  def _reduce_61(val, _values, result)
    #	       result = val[0]
	       result = val[0][0]
	       val[1].lparen = val[0][1]
	       result.set_args val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 267)
  def _reduce_62(val, _values, result)
    	       @lex.indent_push(val[1])
#      	       result = val[0]
      	       result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 274)
  def _reduce_63(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = Node::CommandElementList.new
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 279)
  def _reduce_64(val, _values, result)
    		result = val[0]
  		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 291)
  def _reduce_65(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.y', 297)
  def _reduce_67(val, _values, result)
    	      if val[1]
		result = Node::DoBlock(val[2], val[1])
	      else
		result = Node::DoBlock(val[2])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 305)
  def _reduce_68(val, _values, result)
    	      if val[1]
		result = Node::DoBlock(val[2], val[1])
	      else
		result = Node::DoBlock(val[2])
	      end
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_69(val, _values, result)
    	      @lex.indent_push(val[0])
      	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 319)
  def _reduce_70(val, _values, result)
    	      @lex.indent_push(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 323)
  def _reduce_71(val, _values, result)
     	      result = nil
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 327)
  def _reduce_72(val, _values, result)
     	      result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 332)
  def _reduce_73(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_DO_BEG
	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 337)
  def _reduce_74(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 343)
  def _reduce_75(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 347)
  def _reduce_76(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 351)
  def _reduce_77(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 355)
  def _reduce_78(val, _values, result)
          	       result = Node::SimpleCommand(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 359)
  def _reduce_79(val, _values, result)
          	       result = Node::SimpleCommand(IDToken.dup_from(val[0], "class"))
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 364)
  def _reduce_80(val, _values, result)
    	       result = Node::CommandElementList.new
	    
    result
  end
.,.,

# reduce 81 omitted

module_eval(<<'.,.,', 'parser.y', 370)
  def _reduce_82(val, _values, result)
    	       result = Node::CommandElementList.new(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 374)
  def _reduce_83(val, _values, result)
    	       result = val[0]
      	       result.push val[1]
	    
    result
  end
.,.,

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.y', 401)
  def _reduce_97(val, _values, result)
    	      result = Node::LiteralCommand(val[0])  
    	    
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.y', 417)
  def _reduce_108(val, _values, result)
    	      result = Node::Symbol(val[2])
	    
    result
  end
.,.,

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.y', 426)
  def _reduce_112(val, _values, result)
                   case val[0].commands.last
	       when Node::SimpleCommand
		  if val[0].commands.last.args.size > 0
		    yyerror val[0], "syntax error not assginable #{val[0].inspect}."
		  end
	       end
	       result = Node::AssginCommand(val[0], val[3])
	    
    result
  end
.,.,

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.y', 445)
  def _reduce_114(val, _values, result)
    		result = Node::IndexRefCommand(*val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 450)
  def _reduce_115(val, _values, result)
    		result = [val[0], val[3]]
	    
    result
  end
.,.,

# reduce 116 omitted

module_eval(<<'.,.,', 'parser.y', 471)
  def _reduce_117(val, _values, result)
    		body = Node::BeginCommand(*val[1])
		result = Node::ClassCommand(val[0], nil, body)
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 477)
  def _reduce_118(val, _values, result)
    		@lex.indent_push(val[0])
		@lex.lex_state = Lex::EXPR_BEG
		result=val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 484)
  def _reduce_119(val, _values, result)
    		body = Node::BeginCommand(*val[1])
		result = Node::DefCommand(val[0], nil, body)
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 489)
  def _reduce_120(val, _values, result)
    		arg = val[0][1]
		body = Node::BeginCommand(*val[1])
		result = Node::DefCommand(val[0][0], arg, body)
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 496)
  def _reduce_121(val, _values, result)
    		@lex.indent_push(val[0])
		@lex.lex_state = Lex::EXPR_BEG
		result = val[1]
  	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 503)
  def _reduce_122(val, _values, result)
    		@lex.indent_push(val[0])
		@lex.lex_state = Lex::EXPR_BEG
		result = [val[1], val[2]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 510)
  def _reduce_123(val, _values, result)
    	      result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 515)
  def _reduce_124(val, _values, result)
    	       result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 519)
  def _reduce_125(val, _values, result)
    	      result = val[0]
	      result.push val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 525)
  def _reduce_126(val, _values, result)
         		result = Node::AliasCommand(val[1], val[4])
   	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 538)
  def _reduce_127(val, _values, result)
    		result = Node::BeginCommand(*val[1])
		result.space_seen = val[0].space_seen
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 543)
  def _reduce_128(val, _values, result)
    		@lex.indent_push(val[0])
		@lex.lex_state = Lex::EXPR_BEG
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 549)
  def _reduce_129(val, _values, result)
    		result = val
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 554)
  def _reduce_130(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 558)
  def _reduce_131(val, _values, result)
    		result = Node::RescueCommand(val[1], val[2], val[5])
		if val[6]
		   result, t = val[6], result
		   result = [result] unless result.kind_of?(Array)
		   result.unshift t
		else
		   result = Node::RescueCommand(val[1], val[2], val[5])
		end		  
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 569)
  def _reduce_132(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 573)
  def _reduce_133(val, _values, result)
    		result = val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 577)
  def _reduce_134(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 582)
  def _reduce_135(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 586)
  def _reduce_136(val, _values, result)
    		result = nil
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 590)
  def _reduce_137(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 595)
  def _reduce_138(val, _values, result)
    	        result = Node::WhileCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 599)
  def _reduce_139(val, _values, result)
    		@lex.indent_push(val[0])
		result = val[3]
	    
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.y', 610)
  def _reduce_144(val, _values, result)
    		result = Node::UntilCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 615)
  def _reduce_145(val, _values, result)
    		@lex.indent_push(val[0])
		result = val[3]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 622)
  def _reduce_146(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 626)
  def _reduce_147(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[2])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 630)
  def _reduce_148(val, _values, result)
    		result = Node::IfCommand(val[0][0], val[0][1], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 635)
  def _reduce_149(val, _values, result)
    		@lex.indent_pop
		@lex.indent_push(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 641)
  def _reduce_150(val, _values, result)
    		result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 645)
  def _reduce_151(val, _values, result)
    		@lex.indent_push(val[0])
		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 651)
  def _reduce_152(val, _values, result)
    		result = Node::IfCommand(val[0], val[3])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 655)
  def _reduce_153(val, _values, result)
    		result = Node::IfCommand(val[0], val[3], val[5])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 659)
  def _reduce_154(val, _values, result)
    		result = Node::IfCommand(val[0], val[3], val[4])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 664)
  def _reduce_155(val, _values, result)
    		@lex.indent_pop
		@lex.indent_push(val[0])
		result = val[2]
	    
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.y', 675)
  def _reduce_158(val, _values, result)
    		result = Node::IfCommand(val[0], val[2], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 679)
  def _reduce_159(val, _values, result)
    		@lex.indent_push(val[0])
		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 687)
  def _reduce_160(val, _values, result)
    		result = Node::ForCommand(val[0][0], val[0][1], val[3])
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 692)
  def _reduce_161(val, _values, result)
    		@lex.indent_push(val[0])
		result = [val[3], val[7]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 698)
  def _reduce_162(val, _values, result)
    	       @lex.lex_state = Lex::EXPR_BEG
	       result = [val[0]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 703)
  def _reduce_163(val, _values, result)
    	      result = val[0]
	      result.push val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 710)
  def _reduce_164(val, _values, result)
    		result = Node::CaseCommand(val[0], val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 714)
  def _reduce_165(val, _values, result)
    		@lex.indent_push(val[0])
		result=val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 722)
  def _reduce_166(val, _values, result)
    		case val[4]
		when Array
		  result = val[4]
		  result.unshift Node::WhenCommand(val[1], val[3])
		when nil
		  result = [Node::WhenCommand(val[1], val[3])]
		else
		  result = [Node::WhenCommand(val[1], val[3]), val[4]]
		end
	    
    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

module_eval(<<'.,.,', 'parser.y', 758)
  def _reduce_169(val, _values, result)
    		result = Node::BreakCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 763)
  def _reduce_170(val, _values, result)
    		result = Node::NextCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 768)
  def _reduce_171(val, _values, result)
    		result = Node::RedoCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 773)
  def _reduce_172(val, _values, result)
    		result = Node::RetryCommand()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 778)
  def _reduce_173(val, _values, result)
    		result = Node::RaiseCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 783)
  def _reduce_174(val, _values, result)
    		result = Node::ReturnCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 788)
  def _reduce_175(val, _values, result)
    		result = Node::YieldCommand(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 794)
  def _reduce_176(val, _values, result)
    	        result = Node::Group(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 799)
  def _reduce_177(val, _values, result)
    		@lex.indent_push(val[0])
		@lex.lex_state = Lex::EXPR_BEG
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 805)
  def _reduce_178(val, _values, result)
    	        result = Node::XString(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 810)
  def _reduce_179(val, _values, result)
    		@lex.indent_push(val[0])
		@lex.lex_state = Lex::EXPR_BEG
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 852)
  def _reduce_180(val, _values, result)
    		result = val[2]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 857)
  def _reduce_181(val, _values, result)
     	       result.pipeout = :RESULT
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 910)
  def _reduce_182(val, _values, result)
    		result = Node::RubyExp(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 915)
  def _reduce_183(val, _values, result)
    		result = Node::Array(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 920)
  def _reduce_184(val, _values, result)
      		@lex.indent_push(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 925)
  def _reduce_185(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
		result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 930)
  def _reduce_186(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 935)
  def _reduce_187(val, _values, result)
      		@lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 941)
  def _reduce_188(val, _values, result)
    		result = Node::Hash(val[1])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 945)
  def _reduce_189(val, _values, result)
    		@lex.indent_push(val[0])
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 950)
  def _reduce_190(val, _values, result)
    		@lex.lex_state = Lex::EXPR_ARG
	        result = []
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 955)
  def _reduce_191(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
	        result.push val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 960)
  def _reduce_192(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[5]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 965)
  def _reduce_193(val, _values, result)
    	        @lex.lex_state = Lex::EXPR_ARG
		result = [val[0], val[3]]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 971)
  def _reduce_194(val, _values, result)
    		result = Node::Sequence()
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 975)
  def _reduce_195(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 979)
  def _reduce_196(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 983)
  def _reduce_197(val, _values, result)
    		val[1].last_command_to_async
		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 988)
  def _reduce_198(val, _values, result)
    		result = val[1]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 993)
  def _reduce_199(val, _values, result)
     		result = Node::Sequence()
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 997)
  def _reduce_200(val, _values, result)
     		result = val[0]
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1001)
  def _reduce_201(val, _values, result)
     		result = val[0]
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1005)
  def _reduce_202(val, _values, result)
     		val[1].last_command_to_async
 		result = val[0]
 	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1010)
  def _reduce_203(val, _values, result)
     		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1015)
  def _reduce_204(val, _values, result)
    	        result = Node::Sequence(val[0]) 
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1019)
  def _reduce_205(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1024)
  def _reduce_206(val, _values, result)
    		val[0].last_command_to_async
		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1030)
  def _reduce_207(val, _values, result)
    		val[0].add_command(val[4])
		result = val[0]
	    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1036)
  def _reduce_208(val, _values, result)
    	    result = [val[0]]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1040)
  def _reduce_209(val, _values, result)
    	    val[0].push val[1]
	    result = val[0]
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1046)
  def _reduce_210(val, _values, result)
    	    result = Node::Redirection(-1, ">", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1051)
  def _reduce_211(val, _values, result)
    	    result = Node::Redirection(-1, "<", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1056)
  def _reduce_212(val, _values, result)
    	    result = Node::Redirection(val[0], ">", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1061)
  def _reduce_213(val, _values, result)
    	    result = Node::Redirection(val[0], "<", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 214 omitted

# reduce 215 omitted

module_eval(<<'.,.,', 'parser.y', 1068)
  def _reduce_216(val, _values, result)
    	    result = Node::Redirection(-1, ">>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1073)
  def _reduce_217(val, _values, result)
    	    result = Node::Redirection(val[0], ">>", val[2])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

module_eval(<<'.,.,', 'parser.y', 1112)
  def _reduce_246(val, _values, result)
    	    result = Node::Redirection(-1, "&>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1117)
  def _reduce_247(val, _values, result)
    	    result = Node::Redirection(-1, "&>>", val[1])
	    result.space_seen = val[0].space_seen
	  
    result
  end
.,.,

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

# reduce 254 omitted

# reduce 255 omitted

# reduce 256 omitted

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

module_eval(<<'.,.,', 'parser.y', 1139)
  def _reduce_260(val, _values, result)
    @lex.cond_push(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1140)
  def _reduce_261(val, _values, result)
    @lex.cond_pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1142)
  def _reduce_262(val, _values, result)
    @lex.lex_state = Lex::EXPR_BEG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1143)
  def _reduce_263(val, _values, result)
    @lex.lex_state = Lex::EXPR_ARG
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1144)
  def _reduce_264(val, _values, result)
    @lex.lex_state = Lex::EXPR_END
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1146)
  def _reduce_265(val, _values, result)
    @lex.indent_pop
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Reish
